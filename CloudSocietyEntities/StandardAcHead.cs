//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class StandardAcHead
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid AcHeadID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string AcHead
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SubCategoryID
        {
            get { return _subCategoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subCategoryID != value)
                    {
                        if (StandardAcSubCategory != null && StandardAcSubCategory.SubCategoryID != value)
                        {
                            StandardAcSubCategory = null;
                        }
                        _subCategoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _subCategoryID;
        [Required]
        public virtual short Sequence
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        public virtual string Nature
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> TDSCategoryID
        {
            get { return _tDSCategoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_tDSCategoryID != value)
                    {
                        if (TDSCategory != null && TDSCategory.TDSCategoryID != value)
                        {
                            TDSCategory = null;
                        }
                        _tDSCategoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _tDSCategoryID;
        [Required]
        public virtual bool TDSCompany
        {
            get { return _tDSCompany; }
            set { _tDSCompany = value; }
        }
        private bool _tDSCompany = false;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual StandardAcSubCategory StandardAcSubCategory
        {
            get { return _standardAcSubCategory; }
            set
            {
                if (!ReferenceEquals(_standardAcSubCategory, value))
                {
                    var previousValue = _standardAcSubCategory;
                    _standardAcSubCategory = value;
                    FixupStandardAcSubCategory(previousValue);
                }
            }
        }
        private StandardAcSubCategory _standardAcSubCategory;
    
        public virtual TDSCategory TDSCategory
        {
            get { return _tDSCategory; }
            set
            {
                if (!ReferenceEquals(_tDSCategory, value))
                {
                    var previousValue = _tDSCategory;
                    _tDSCategory = value;
                    FixupTDSCategory(previousValue);
                }
            }
        }
        private TDSCategory _tDSCategory;
    
        public virtual ICollection<StandardChargeHead> StandardChargeHeads
        {
            get
            {
                if (_standardChargeHeads == null)
                {
                    var newCollection = new FixupCollection<StandardChargeHead>();
                    newCollection.CollectionChanged += FixupStandardChargeHeads;
                    _standardChargeHeads = newCollection;
                }
                return _standardChargeHeads;
            }
            set
            {
                if (!ReferenceEquals(_standardChargeHeads, value))
                {
                    var previousValue = _standardChargeHeads as FixupCollection<StandardChargeHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStandardChargeHeads;
                    }
                    _standardChargeHeads = value;
                    var newValue = value as FixupCollection<StandardChargeHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStandardChargeHeads;
                    }
                }
            }
        }
        private ICollection<StandardChargeHead> _standardChargeHeads;
    
        public virtual ICollection<Tax> Taxes
        {
            get
            {
                if (_taxes == null)
                {
                    var newCollection = new FixupCollection<Tax>();
                    newCollection.CollectionChanged += FixupTaxes;
                    _taxes = newCollection;
                }
                return _taxes;
            }
            set
            {
                if (!ReferenceEquals(_taxes, value))
                {
                    var previousValue = _taxes as FixupCollection<Tax>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTaxes;
                    }
                    _taxes = value;
                    var newValue = value as FixupCollection<Tax>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTaxes;
                    }
                }
            }
        }
        private ICollection<Tax> _taxes;
    
        public virtual ICollection<TDSCategory> TDSCategories
        {
            get
            {
                if (_tDSCategories == null)
                {
                    var newCollection = new FixupCollection<TDSCategory>();
                    newCollection.CollectionChanged += FixupTDSCategories;
                    _tDSCategories = newCollection;
                }
                return _tDSCategories;
            }
            set
            {
                if (!ReferenceEquals(_tDSCategories, value))
                {
                    var previousValue = _tDSCategories as FixupCollection<TDSCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTDSCategories;
                    }
                    _tDSCategories = value;
                    var newValue = value as FixupCollection<TDSCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTDSCategories;
                    }
                }
            }
        }
        private ICollection<TDSCategory> _tDSCategories;
    
        public virtual ICollection<PayMode> PayModes
        {
            get
            {
                if (_payModes == null)
                {
                    var newCollection = new FixupCollection<PayMode>();
                    newCollection.CollectionChanged += FixupPayModes;
                    _payModes = newCollection;
                }
                return _payModes;
            }
            set
            {
                if (!ReferenceEquals(_payModes, value))
                {
                    var previousValue = _payModes as FixupCollection<PayMode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayModes;
                    }
                    _payModes = value;
                    var newValue = value as FixupCollection<PayMode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayModes;
                    }
                }
            }
        }
        private ICollection<PayMode> _payModes;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupStandardAcSubCategory(StandardAcSubCategory previousValue)
        {
            if (previousValue != null && previousValue.StandardAcHeads.Contains(this))
            {
                previousValue.StandardAcHeads.Remove(this);
            }
    
            if (StandardAcSubCategory != null)
            {
                if (!StandardAcSubCategory.StandardAcHeads.Contains(this))
                {
                    StandardAcSubCategory.StandardAcHeads.Add(this);
                }
                if (SubCategoryID != StandardAcSubCategory.SubCategoryID)
                {
                    SubCategoryID = StandardAcSubCategory.SubCategoryID;
                }
            }
        }
    
        private void FixupTDSCategory(TDSCategory previousValue)
        {
            if (previousValue != null && previousValue.StandardAcHeads.Contains(this))
            {
                previousValue.StandardAcHeads.Remove(this);
            }
    
            if (TDSCategory != null)
            {
                if (!TDSCategory.StandardAcHeads.Contains(this))
                {
                    TDSCategory.StandardAcHeads.Add(this);
                }
                if (TDSCategoryID != TDSCategory.TDSCategoryID)
                {
                    TDSCategoryID = TDSCategory.TDSCategoryID;
                }
            }
            else if (!_settingFK)
            {
                TDSCategoryID = null;
            }
        }
    
        private void FixupStandardChargeHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StandardChargeHead item in e.NewItems)
                {
                    item.StandardAcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StandardChargeHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.StandardAcHead, this))
                    {
                        item.StandardAcHead = null;
                    }
                }
            }
        }
    
        private void FixupTaxes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Tax item in e.NewItems)
                {
                    item.StandardAcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tax item in e.OldItems)
                {
                    if (ReferenceEquals(item.StandardAcHead, this))
                    {
                        item.StandardAcHead = null;
                    }
                }
            }
        }
    
        private void FixupTDSCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TDSCategory item in e.NewItems)
                {
                    item.StandardAcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDSCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.StandardAcHead, this))
                    {
                        item.StandardAcHead = null;
                    }
                }
            }
        }
    
        private void FixupPayModes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PayMode item in e.NewItems)
                {
                    item.StandardAcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PayMode item in e.OldItems)
                {
                    if (ReferenceEquals(item.StandardAcHead, this))
                    {
                        item.StandardAcHead = null;
                    }
                }
            }
        }

        #endregion

    }
}
