//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Subscriber
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SubscriberID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
    	
        [StringLength(5, ErrorMessage="Number of  characters cannot be more than 5")]
        [Required]
        public virtual string Abbreviation
        {
            get;
            set;
        }
        [Required]
        public virtual string Address
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string City
        {
            get;
            set;
        }
        [Required]
        public virtual decimal PIN
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid StateID
        {
            get { return _stateID; }
            set
            {
                if (_stateID != value)
                {
                    if (State != null && State.StateID != value)
                    {
                        State = null;
                    }
                    _stateID = value;
                }
            }
        }
        private System.Guid _stateID;
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        [Required]
        public virtual string CountryCode
        {
            get { return _countryCode; }
            set
            {
                if (_countryCode != value)
                {
                    if (Country != null && Country.CountryCode != value)
                    {
                        Country = null;
                    }
                    _countryCode = value;
                }
            }
        }
        private string _countryCode = "091";
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string ContactPerson
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string Phone
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string Mobile
        {
            get;
            set;
        }
        [Required]
        public virtual bool Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private bool _active = true;
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual ICollection<Society> Societies
        {
            get
            {
                if (_societies == null)
                {
                    var newCollection = new FixupCollection<Society>();
                    newCollection.CollectionChanged += FixupSocieties;
                    _societies = newCollection;
                }
                return _societies;
            }
            set
            {
                if (!ReferenceEquals(_societies, value))
                {
                    var previousValue = _societies as FixupCollection<Society>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocieties;
                    }
                    _societies = value;
                    var newValue = value as FixupCollection<Society>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocieties;
                    }
                }
            }
        }
        private ICollection<Society> _societies;
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual ICollection<UserDetail> UserDetails
        {
            get
            {
                if (_userDetails == null)
                {
                    var newCollection = new FixupCollection<UserDetail>();
                    newCollection.CollectionChanged += FixupUserDetails;
                    _userDetails = newCollection;
                }
                return _userDetails;
            }
            set
            {
                if (!ReferenceEquals(_userDetails, value))
                {
                    var previousValue = _userDetails as FixupCollection<UserDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserDetails;
                    }
                    _userDetails = value;
                    var newValue = value as FixupCollection<UserDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserDetails;
                    }
                }
            }
        }
        private ICollection<UserDetail> _userDetails;
    
        public virtual ICollection<SubscriptionInvoice> SubscriptionInvoices
        {
            get
            {
                if (_subscriptionInvoices == null)
                {
                    var newCollection = new FixupCollection<SubscriptionInvoice>();
                    newCollection.CollectionChanged += FixupSubscriptionInvoices;
                    _subscriptionInvoices = newCollection;
                }
                return _subscriptionInvoices;
            }
            set
            {
                if (!ReferenceEquals(_subscriptionInvoices, value))
                {
                    var previousValue = _subscriptionInvoices as FixupCollection<SubscriptionInvoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptionInvoices;
                    }
                    _subscriptionInvoices = value;
                    var newValue = value as FixupCollection<SubscriptionInvoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptionInvoices;
                    }
                }
            }
        }
        private ICollection<SubscriptionInvoice> _subscriptionInvoices;
    
        public virtual ICollection<Coupon> Coupons_1
        {
            get
            {
                if (_coupons_1 == null)
                {
                    var newCollection = new FixupCollection<Coupon>();
                    newCollection.CollectionChanged += FixupCoupons_1;
                    _coupons_1 = newCollection;
                }
                return _coupons_1;
            }
            set
            {
                if (!ReferenceEquals(_coupons_1, value))
                {
                    var previousValue = _coupons_1 as FixupCollection<Coupon>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCoupons_1;
                    }
                    _coupons_1 = value;
                    var newValue = value as FixupCollection<Coupon>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCoupons_1;
                    }
                }
            }
        }
        private ICollection<Coupon> _coupons_1;

        #endregion

        #region Association Fixup
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Subscribers.Contains(this))
            {
                previousValue.Subscribers.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Subscribers.Contains(this))
                {
                    Country.Subscribers.Add(this);
                }
                if (CountryCode != Country.CountryCode)
                {
                    CountryCode = Country.CountryCode;
                }
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.Subscribers.Contains(this))
            {
                previousValue.Subscribers.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.Subscribers.Contains(this))
                {
                    State.Subscribers.Add(this);
                }
                if (StateID != State.StateID)
                {
                    StateID = State.StateID;
                }
            }
        }
    
        private void FixupSocieties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Society item in e.NewItems)
                {
                    item.Subscriber = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Society item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subscriber, this))
                    {
                        item.Subscriber = null;
                    }
                }
            }
        }
    
        private void FixupUserDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserDetail item in e.NewItems)
                {
                    item.Subscriber = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subscriber, this))
                    {
                        item.Subscriber = null;
                    }
                }
            }
        }
    
        private void FixupSubscriptionInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubscriptionInvoice item in e.NewItems)
                {
                    item.Subscriber = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubscriptionInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subscriber, this))
                    {
                        item.Subscriber = null;
                    }
                }
            }
        }
    
        private void FixupCoupons_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Coupon item in e.NewItems)
                {
                    item.Subscriber = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Coupon item in e.OldItems)
                {
                    if (ReferenceEquals(item.Subscriber, this))
                    {
                        item.Subscriber = null;
                    }
                }
            }
        }

        #endregion

    }
}
