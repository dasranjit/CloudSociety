//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Bank
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid BankID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
        [Required]
        public virtual bool Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private bool _active = true;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AcTransaction> AcTransactions
        {
            get
            {
                if (_acTransactions == null)
                {
                    var newCollection = new FixupCollection<AcTransaction>();
                    newCollection.CollectionChanged += FixupAcTransactions;
                    _acTransactions = newCollection;
                }
                return _acTransactions;
            }
            set
            {
                if (!ReferenceEquals(_acTransactions, value))
                {
                    var previousValue = _acTransactions as FixupCollection<AcTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactions;
                    }
                    _acTransactions = value;
                    var newValue = value as FixupCollection<AcTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactions;
                    }
                }
            }
        }
        private ICollection<AcTransaction> _acTransactions;
    
        public virtual ICollection<SocietyInvestment> SocietyInvestments
        {
            get
            {
                if (_societyInvestments == null)
                {
                    var newCollection = new FixupCollection<SocietyInvestment>();
                    newCollection.CollectionChanged += FixupSocietyInvestments;
                    _societyInvestments = newCollection;
                }
                return _societyInvestments;
            }
            set
            {
                if (!ReferenceEquals(_societyInvestments, value))
                {
                    var previousValue = _societyInvestments as FixupCollection<SocietyInvestment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyInvestments;
                    }
                    _societyInvestments = value;
                    var newValue = value as FixupCollection<SocietyInvestment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyInvestments;
                    }
                }
            }
        }
        private ICollection<SocietyInvestment> _societyInvestments;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;

        #endregion

        #region Association Fixup
    
        private void FixupAcTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransaction item in e.NewItems)
                {
                    item.Bank = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Bank, this))
                    {
                        item.Bank = null;
                    }
                }
            }
        }
    
        private void FixupSocietyInvestments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyInvestment item in e.NewItems)
                {
                    item.BankEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyInvestment item in e.OldItems)
                {
                    if (ReferenceEquals(item.BankEntity, this))
                    {
                        item.BankEntity = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.Bank = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.Bank, this))
                    {
                        item.Bank = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.Bank = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Bank, this))
                    {
                        item.Bank = null;
                    }
                }
            }
        }

        #endregion

    }
}
