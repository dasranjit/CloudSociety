//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietyBillSeries
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (Society != null && Society.SocietyID != value)
                        {
                            Society = null;
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyID;
    	
        [StringLength(5, ErrorMessage="Number of  characters cannot be more than 5")]
        [Required]
        public virtual string BillAbbreviation
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> TaxID
        {
            get { return _taxID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_taxID != value)
                    {
                        if (Tax != null && Tax.TaxID != value)
                        {
                            Tax = null;
                        }
                        _taxID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _taxID;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        [Required]
        public virtual string BillingFrequency
        {
            get;
            set;
        }
        [Required]
        public virtual byte BillDay
        {
            get;
            set;
        }
        public virtual Nullable<byte> DueDays
        {
            get;
            set;
        }
        public virtual string Terms
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string Note
        {
            get;
            set;
        }
        public virtual Nullable<bool> PrintArea
        {
            get;
            set;
        }
        [Required]
        public virtual decimal InterestRate
        {
            get;
            set;
        }
        [Required]
        public virtual short MinimumInterest
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        [Required]
        public virtual string OSAdjustment
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual Tax Tax
        {
            get { return _tax; }
            set
            {
                if (!ReferenceEquals(_tax, value))
                {
                    var previousValue = _tax;
                    _tax = value;
                    FixupTax(previousValue);
                }
            }
        }
        private Tax _tax;
    
        public virtual ICollection<SocietyChargeHead> SocietyChargeHeads
        {
            get
            {
                if (_societyChargeHeads == null)
                {
                    var newCollection = new FixupCollection<SocietyChargeHead>();
                    newCollection.CollectionChanged += FixupSocietyChargeHeads;
                    _societyChargeHeads = newCollection;
                }
                return _societyChargeHeads;
            }
            set
            {
                if (!ReferenceEquals(_societyChargeHeads, value))
                {
                    var previousValue = _societyChargeHeads as FixupCollection<SocietyChargeHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyChargeHeads;
                    }
                    _societyChargeHeads = value;
                    var newValue = value as FixupCollection<SocietyChargeHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyChargeHeads;
                    }
                }
            }
        }
        private ICollection<SocietyChargeHead> _societyChargeHeads;
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;
    
        public virtual ICollection<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get
            {
                if (_societyReceiptOnholds == null)
                {
                    var newCollection = new FixupCollection<SocietyReceiptOnhold>();
                    newCollection.CollectionChanged += FixupSocietyReceiptOnholds;
                    _societyReceiptOnholds = newCollection;
                }
                return _societyReceiptOnholds;
            }
            set
            {
                if (!ReferenceEquals(_societyReceiptOnholds, value))
                {
                    var previousValue = _societyReceiptOnholds as FixupCollection<SocietyReceiptOnhold>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceiptOnholds;
                    }
                    _societyReceiptOnholds = value;
                    var newValue = value as FixupCollection<SocietyReceiptOnhold>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceiptOnholds;
                    }
                }
            }
        }
        private ICollection<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.SocietyBillSeries.Contains(this))
            {
                previousValue.SocietyBillSeries.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.SocietyBillSeries.Contains(this))
                {
                    Society.SocietyBillSeries.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupTax(Tax previousValue)
        {
            if (previousValue != null && previousValue.SocietyBillSeries.Contains(this))
            {
                previousValue.SocietyBillSeries.Remove(this);
            }
    
            if (Tax != null)
            {
                if (!Tax.SocietyBillSeries.Contains(this))
                {
                    Tax.SocietyBillSeries.Add(this);
                }
                if (TaxID != Tax.TaxID)
                {
                    TaxID = Tax.TaxID;
                }
            }
            else if (!_settingFK)
            {
                TaxID = null;
            }
        }
    
        private void FixupSocietyChargeHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyChargeHead item in e.NewItems)
                {
                    item.SocietyBillSeries = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyChargeHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBillSeries, this))
                    {
                        item.SocietyBillSeries = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.SocietyBillSery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBillSery, this))
                    {
                        item.SocietyBillSery = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.SocietyBillSery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBillSery, this))
                    {
                        item.SocietyBillSery = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.SocietyBillSery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBillSery, this))
                    {
                        item.SocietyBillSery = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceiptOnholds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.NewItems)
                {
                    item.SocietyBillSery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBillSery, this))
                    {
                        item.SocietyBillSery = null;
                    }
                }
            }
        }

        #endregion

    }
}
