//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietyMember
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyMemberID
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (Society != null && Society.SocietyID != value)
                        {
                            Society = null;
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyID;
        public virtual Nullable<short> FolioNo
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Member
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid MemberClassID
        {
            get { return _memberClassID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberClassID != value)
                    {
                        if (MemberClass != null && MemberClass.MemberClassID != value)
                        {
                            MemberClass = null;
                        }
                        _memberClassID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _memberClassID;
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string ContactPerson
        {
            get;
            set;
        }
        public virtual string Address
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string City
        {
            get;
            set;
        }
        public virtual Nullable<decimal> PIN
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> StateID
        {
            get { return _stateID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateID != value)
                    {
                        if (State != null && State.StateID != value)
                        {
                            State = null;
                        }
                        _stateID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _stateID;
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        public virtual string CountryCode
        {
            get { return _countryCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryCode != value)
                    {
                        if (Country != null && Country.CountryCode != value)
                        {
                            Country = null;
                        }
                        _countryCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _countryCode;
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string PhoneNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string HomePhoneNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string OfficePhoneNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string MobileNo
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> OccupationID
        {
            get { return _occupationID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_occupationID != value)
                    {
                        if (OccupationEntity != null && OccupationEntity.OccupationID != value)
                        {
                            OccupationEntity = null;
                        }
                        _occupationID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _occupationID;
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string Occupation
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string LoanFrom
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> LoanClearedOn
        {
            get;
            set;
        }
        public virtual Nullable<byte> FourWheelers
        {
            get;
            set;
        }
        public virtual Nullable<byte> TwoWheelers
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
    	
        [StringLength(512, ErrorMessage="Number of  characters cannot be more than 512")]
        public virtual string EmailId
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual MemberClass MemberClass
        {
            get { return _memberClass; }
            set
            {
                if (!ReferenceEquals(_memberClass, value))
                {
                    var previousValue = _memberClass;
                    _memberClass = value;
                    FixupMemberClass(previousValue);
                }
            }
        }
        private MemberClass _memberClass;
    
        public virtual Occupation OccupationEntity
        {
            get { return _occupationEntity; }
            set
            {
                if (!ReferenceEquals(_occupationEntity, value))
                {
                    var previousValue = _occupationEntity;
                    _occupationEntity = value;
                    FixupOccupationEntity(previousValue);
                }
            }
        }
        private Occupation _occupationEntity;
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual ICollection<SocietyMemberJointHolder> SocietyMemberJointHolders
        {
            get
            {
                if (_societyMemberJointHolders == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberJointHolder>();
                    newCollection.CollectionChanged += FixupSocietyMemberJointHolders;
                    _societyMemberJointHolders = newCollection;
                }
                return _societyMemberJointHolders;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberJointHolders, value))
                {
                    var previousValue = _societyMemberJointHolders as FixupCollection<SocietyMemberJointHolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberJointHolders;
                    }
                    _societyMemberJointHolders = value;
                    var newValue = value as FixupCollection<SocietyMemberJointHolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberJointHolders;
                    }
                }
            }
        }
        private ICollection<SocietyMemberJointHolder> _societyMemberJointHolders;
    
        public virtual ICollection<SocietyMemberNominee> SocietyMemberNominees
        {
            get
            {
                if (_societyMemberNominees == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberNominee>();
                    newCollection.CollectionChanged += FixupSocietyMemberNominees;
                    _societyMemberNominees = newCollection;
                }
                return _societyMemberNominees;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberNominees, value))
                {
                    var previousValue = _societyMemberNominees as FixupCollection<SocietyMemberNominee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberNominees;
                    }
                    _societyMemberNominees = value;
                    var newValue = value as FixupCollection<SocietyMemberNominee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberNominees;
                    }
                }
            }
        }
        private ICollection<SocietyMemberNominee> _societyMemberNominees;
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual ICollection<SocietyMemberTenant> SocietyMemberTenants
        {
            get
            {
                if (_societyMemberTenants == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberTenant>();
                    newCollection.CollectionChanged += FixupSocietyMemberTenants;
                    _societyMemberTenants = newCollection;
                }
                return _societyMemberTenants;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberTenants, value))
                {
                    var previousValue = _societyMemberTenants as FixupCollection<SocietyMemberTenant>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberTenants;
                    }
                    _societyMemberTenants = value;
                    var newValue = value as FixupCollection<SocietyMemberTenant>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberTenants;
                    }
                }
            }
        }
        private ICollection<SocietyMemberTenant> _societyMemberTenants;
    
        public virtual ICollection<SocietyBuildingUnitTransfer> SocietyBuildingUnitTransfers
        {
            get
            {
                if (_societyBuildingUnitTransfers == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitTransfer>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitTransfers;
                    _societyBuildingUnitTransfers = newCollection;
                }
                return _societyBuildingUnitTransfers;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitTransfers, value))
                {
                    var previousValue = _societyBuildingUnitTransfers as FixupCollection<SocietyBuildingUnitTransfer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitTransfers;
                    }
                    _societyBuildingUnitTransfers = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitTransfer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitTransfers;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitTransfer> _societyBuildingUnitTransfers;
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<UserDetail> UserDetails
        {
            get
            {
                if (_userDetails == null)
                {
                    var newCollection = new FixupCollection<UserDetail>();
                    newCollection.CollectionChanged += FixupUserDetails;
                    _userDetails = newCollection;
                }
                return _userDetails;
            }
            set
            {
                if (!ReferenceEquals(_userDetails, value))
                {
                    var previousValue = _userDetails as FixupCollection<UserDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserDetails;
                    }
                    _userDetails = value;
                    var newValue = value as FixupCollection<UserDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserDetails;
                    }
                }
            }
        }
        private ICollection<UserDetail> _userDetails;
    
        public virtual ICollection<SocietyBuildingUnitSubscriptionBalance> SocietyBuildingUnitSubscriptionBalances
        {
            get
            {
                if (_societyBuildingUnitSubscriptionBalances == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitSubscriptionBalance>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    _societyBuildingUnitSubscriptionBalances = newCollection;
                }
                return _societyBuildingUnitSubscriptionBalances;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitSubscriptionBalances, value))
                {
                    var previousValue = _societyBuildingUnitSubscriptionBalances as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                    _societyBuildingUnitSubscriptionBalances = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitSubscriptionBalance> _societyBuildingUnitSubscriptionBalances;
    
        public virtual ICollection<SocietyParkingTransfer> SocietyParkingTransfers_1
        {
            get
            {
                if (_societyParkingTransfers_1 == null)
                {
                    var newCollection = new FixupCollection<SocietyParkingTransfer>();
                    newCollection.CollectionChanged += FixupSocietyParkingTransfers_1;
                    _societyParkingTransfers_1 = newCollection;
                }
                return _societyParkingTransfers_1;
            }
            set
            {
                if (!ReferenceEquals(_societyParkingTransfers_1, value))
                {
                    var previousValue = _societyParkingTransfers_1 as FixupCollection<SocietyParkingTransfer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyParkingTransfers_1;
                    }
                    _societyParkingTransfers_1 = value;
                    var newValue = value as FixupCollection<SocietyParkingTransfer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyParkingTransfers_1;
                    }
                }
            }
        }
        private ICollection<SocietyParkingTransfer> _societyParkingTransfers_1;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;
    
        public virtual ICollection<CommunicationRecipient> CommunicationRecipients
        {
            get
            {
                if (_communicationRecipients == null)
                {
                    var newCollection = new FixupCollection<CommunicationRecipient>();
                    newCollection.CollectionChanged += FixupCommunicationRecipients;
                    _communicationRecipients = newCollection;
                }
                return _communicationRecipients;
            }
            set
            {
                if (!ReferenceEquals(_communicationRecipients, value))
                {
                    var previousValue = _communicationRecipients as FixupCollection<CommunicationRecipient>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommunicationRecipients;
                    }
                    _communicationRecipients = value;
                    var newValue = value as FixupCollection<CommunicationRecipient>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommunicationRecipients;
                    }
                }
            }
        }
        private ICollection<CommunicationRecipient> _communicationRecipients;
    
        public virtual ICollection<CommunicationReply> CommunicationReplies
        {
            get
            {
                if (_communicationReplies == null)
                {
                    var newCollection = new FixupCollection<CommunicationReply>();
                    newCollection.CollectionChanged += FixupCommunicationReplies;
                    _communicationReplies = newCollection;
                }
                return _communicationReplies;
            }
            set
            {
                if (!ReferenceEquals(_communicationReplies, value))
                {
                    var previousValue = _communicationReplies as FixupCollection<CommunicationReply>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommunicationReplies;
                    }
                    _communicationReplies = value;
                    var newValue = value as FixupCollection<CommunicationReply>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommunicationReplies;
                    }
                }
            }
        }
        private ICollection<CommunicationReply> _communicationReplies;
    
        public virtual ICollection<Communication> Communications
        {
            get
            {
                if (_communications == null)
                {
                    var newCollection = new FixupCollection<Communication>();
                    newCollection.CollectionChanged += FixupCommunications;
                    _communications = newCollection;
                }
                return _communications;
            }
            set
            {
                if (!ReferenceEquals(_communications, value))
                {
                    var previousValue = _communications as FixupCollection<Communication>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommunications;
                    }
                    _communications = value;
                    var newValue = value as FixupCollection<Communication>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommunications;
                    }
                }
            }
        }
        private ICollection<Communication> _communications;
    
        public virtual ICollection<Communication> Communications1
        {
            get
            {
                if (_communications1 == null)
                {
                    var newCollection = new FixupCollection<Communication>();
                    newCollection.CollectionChanged += FixupCommunications1;
                    _communications1 = newCollection;
                }
                return _communications1;
            }
            set
            {
                if (!ReferenceEquals(_communications1, value))
                {
                    var previousValue = _communications1 as FixupCollection<Communication>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommunications1;
                    }
                    _communications1 = value;
                    var newValue = value as FixupCollection<Communication>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommunications1;
                    }
                }
            }
        }
        private ICollection<Communication> _communications1;
    
        public virtual ICollection<SocietyMemberDocument> SocietyMemberDocuments
        {
            get
            {
                if (_societyMemberDocuments == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberDocument>();
                    newCollection.CollectionChanged += FixupSocietyMemberDocuments;
                    _societyMemberDocuments = newCollection;
                }
                return _societyMemberDocuments;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberDocuments, value))
                {
                    var previousValue = _societyMemberDocuments as FixupCollection<SocietyMemberDocument>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberDocuments;
                    }
                    _societyMemberDocuments = value;
                    var newValue = value as FixupCollection<SocietyMemberDocument>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberDocuments;
                    }
                }
            }
        }
        private ICollection<SocietyMemberDocument> _societyMemberDocuments;
    
        public virtual ICollection<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get
            {
                if (_societyReceiptOnholds == null)
                {
                    var newCollection = new FixupCollection<SocietyReceiptOnhold>();
                    newCollection.CollectionChanged += FixupSocietyReceiptOnholds;
                    _societyReceiptOnholds = newCollection;
                }
                return _societyReceiptOnholds;
            }
            set
            {
                if (!ReferenceEquals(_societyReceiptOnholds, value))
                {
                    var previousValue = _societyReceiptOnholds as FixupCollection<SocietyReceiptOnhold>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceiptOnholds;
                    }
                    _societyReceiptOnholds = value;
                    var newValue = value as FixupCollection<SocietyReceiptOnhold>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceiptOnholds;
                    }
                }
            }
        }
        private ICollection<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.SocietyMembers.Contains(this))
            {
                previousValue.SocietyMembers.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.SocietyMembers.Contains(this))
                {
                    Country.SocietyMembers.Add(this);
                }
                if (CountryCode != Country.CountryCode)
                {
                    CountryCode = Country.CountryCode;
                }
            }
            else if (!_settingFK)
            {
                CountryCode = null;
            }
        }
    
        private void FixupMemberClass(MemberClass previousValue)
        {
            if (previousValue != null && previousValue.SocietyMembers.Contains(this))
            {
                previousValue.SocietyMembers.Remove(this);
            }
    
            if (MemberClass != null)
            {
                if (!MemberClass.SocietyMembers.Contains(this))
                {
                    MemberClass.SocietyMembers.Add(this);
                }
                if (MemberClassID != MemberClass.MemberClassID)
                {
                    MemberClassID = MemberClass.MemberClassID;
                }
            }
        }
    
        private void FixupOccupationEntity(Occupation previousValue)
        {
            if (previousValue != null && previousValue.SocietyMembers.Contains(this))
            {
                previousValue.SocietyMembers.Remove(this);
            }
    
            if (OccupationEntity != null)
            {
                if (!OccupationEntity.SocietyMembers.Contains(this))
                {
                    OccupationEntity.SocietyMembers.Add(this);
                }
                if (OccupationID != OccupationEntity.OccupationID)
                {
                    OccupationID = OccupationEntity.OccupationID;
                }
            }
            else if (!_settingFK)
            {
                OccupationID = null;
            }
        }
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.SocietyMembers.Contains(this))
            {
                previousValue.SocietyMembers.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.SocietyMembers.Contains(this))
                {
                    Society.SocietyMembers.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.SocietyMembers.Contains(this))
            {
                previousValue.SocietyMembers.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.SocietyMembers.Contains(this))
                {
                    State.SocietyMembers.Add(this);
                }
                if (StateID != State.StateID)
                {
                    StateID = State.StateID;
                }
            }
            else if (!_settingFK)
            {
                StateID = null;
            }
        }
    
        private void FixupSocietyMemberJointHolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberJointHolder item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberJointHolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberNominees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberNominee item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberNominee item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberTenants(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberTenant item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberTenant item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitTransfers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitTransfer item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitTransfer item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupUserDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserDetail item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitSubscriptionBalances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyParkingTransfers_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyParkingTransfer item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyParkingTransfer item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupCommunicationRecipients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CommunicationRecipient item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommunicationRecipient item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupCommunicationReplies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CommunicationReply item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommunicationReply item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupCommunications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Communication item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Communication item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupCommunications1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Communication item in e.NewItems)
                {
                    item.SocietyMember1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Communication item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember1, this))
                    {
                        item.SocietyMember1 = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberDocuments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberDocument item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberDocument item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceiptOnholds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.NewItems)
                {
                    item.SocietyMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyMember, this))
                    {
                        item.SocietyMember = null;
                    }
                }
            }
        }

        #endregion

    }
}
