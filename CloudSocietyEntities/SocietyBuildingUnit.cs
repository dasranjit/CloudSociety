//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietyBuildingUnit
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyBuildingUnitID
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietyBuildingID
        {
            get { return _societyBuildingID; }
            set
            {
                if (_societyBuildingID != value)
                {
                    if (SocietyBuilding != null && SocietyBuilding.SocietyBuildingID != value)
                    {
                        SocietyBuilding = null;
                    }
                    _societyBuildingID = value;
                }
            }
        }
        private System.Guid _societyBuildingID;
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        [Required]
        public virtual string Unit
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid UnitTypeID
        {
            get { return _unitTypeID; }
            set
            {
                if (_unitTypeID != value)
                {
                    if (UnitType != null && UnitType.UnitTypeID != value)
                    {
                        UnitType = null;
                    }
                    _unitTypeID = value;
                }
            }
        }
        private System.Guid _unitTypeID;
        [Required]
        public virtual byte FloorNo
        {
            get;
            set;
        }
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        public virtual string Wing
        {
            get;
            set;
        }
        public virtual Nullable<short> CarpetArea
        {
            get;
            set;
        }
        public virtual Nullable<short> ChargeableArea
        {
            get;
            set;
        }
        public virtual Nullable<short> TerraceArea
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        public virtual Nullable<short> CertificateNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> IssueDate
        {
            get;
            set;
        }
        public virtual Nullable<short> NoOfShares
        {
            get;
            set;
        }
        public virtual Nullable<short> DistinctiveFrom
        {
            get;
            set;
        }
        public virtual Nullable<short> DistinctiveTo
        {
            get;
            set;
        }
        public virtual Nullable<short> Value
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> PayDate
        {
            get;
            set;
        }
        public virtual Nullable<short> AmountAtAllotment
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual SocietyBuilding SocietyBuilding
        {
            get { return _societyBuilding; }
            set
            {
                if (!ReferenceEquals(_societyBuilding, value))
                {
                    var previousValue = _societyBuilding;
                    _societyBuilding = value;
                    FixupSocietyBuilding(previousValue);
                }
            }
        }
        private SocietyBuilding _societyBuilding;
    
        public virtual ICollection<SocietyBuildingUnitChargeHead> SocietyBuildingUnitChargeHeads
        {
            get
            {
                if (_societyBuildingUnitChargeHeads == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitChargeHead>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitChargeHeads;
                    _societyBuildingUnitChargeHeads = newCollection;
                }
                return _societyBuildingUnitChargeHeads;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitChargeHeads, value))
                {
                    var previousValue = _societyBuildingUnitChargeHeads as FixupCollection<SocietyBuildingUnitChargeHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitChargeHeads;
                    }
                    _societyBuildingUnitChargeHeads = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitChargeHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitChargeHeads;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitChargeHead> _societyBuildingUnitChargeHeads;
    
        public virtual UnitType UnitType
        {
            get { return _unitType; }
            set
            {
                if (!ReferenceEquals(_unitType, value))
                {
                    var previousValue = _unitType;
                    _unitType = value;
                    FixupUnitType(previousValue);
                }
            }
        }
        private UnitType _unitType;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietySpecialBill> SocietySpecialBills
        {
            get
            {
                if (_societySpecialBills == null)
                {
                    var newCollection = new FixupCollection<SocietySpecialBill>();
                    newCollection.CollectionChanged += FixupSocietySpecialBills;
                    _societySpecialBills = newCollection;
                }
                return _societySpecialBills;
            }
            set
            {
                if (!ReferenceEquals(_societySpecialBills, value))
                {
                    var previousValue = _societySpecialBills as FixupCollection<SocietySpecialBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySpecialBills;
                    }
                    _societySpecialBills = value;
                    var newValue = value as FixupCollection<SocietySpecialBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySpecialBills;
                    }
                }
            }
        }
        private ICollection<SocietySpecialBill> _societySpecialBills;
    
        public virtual ICollection<SocietySpecialBillUnit> SocietySpecialBillUnits
        {
            get
            {
                if (_societySpecialBillUnits == null)
                {
                    var newCollection = new FixupCollection<SocietySpecialBillUnit>();
                    newCollection.CollectionChanged += FixupSocietySpecialBillUnits;
                    _societySpecialBillUnits = newCollection;
                }
                return _societySpecialBillUnits;
            }
            set
            {
                if (!ReferenceEquals(_societySpecialBillUnits, value))
                {
                    var previousValue = _societySpecialBillUnits as FixupCollection<SocietySpecialBillUnit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySpecialBillUnits;
                    }
                    _societySpecialBillUnits = value;
                    var newValue = value as FixupCollection<SocietySpecialBillUnit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySpecialBillUnits;
                    }
                }
            }
        }
        private ICollection<SocietySpecialBillUnit> _societySpecialBillUnits;
    
        public virtual ICollection<SocietyBuildingUnitSubscriptionBalance> SocietyBuildingUnitSubscriptionBalances
        {
            get
            {
                if (_societyBuildingUnitSubscriptionBalances == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitSubscriptionBalance>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    _societyBuildingUnitSubscriptionBalances = newCollection;
                }
                return _societyBuildingUnitSubscriptionBalances;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitSubscriptionBalances, value))
                {
                    var previousValue = _societyBuildingUnitSubscriptionBalances as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                    _societyBuildingUnitSubscriptionBalances = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitSubscriptionBalance> _societyBuildingUnitSubscriptionBalances;
    
        public virtual ICollection<SocietyBuildingUnitTransfer> SocietyBuildingUnitTransfers
        {
            get
            {
                if (_societyBuildingUnitTransfers == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitTransfer>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitTransfers;
                    _societyBuildingUnitTransfers = newCollection;
                }
                return _societyBuildingUnitTransfers;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitTransfers, value))
                {
                    var previousValue = _societyBuildingUnitTransfers as FixupCollection<SocietyBuildingUnitTransfer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitTransfers;
                    }
                    _societyBuildingUnitTransfers = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitTransfer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitTransfers;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitTransfer> _societyBuildingUnitTransfers;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;
    
        public virtual ICollection<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get
            {
                if (_societyReceiptOnholds == null)
                {
                    var newCollection = new FixupCollection<SocietyReceiptOnhold>();
                    newCollection.CollectionChanged += FixupSocietyReceiptOnholds;
                    _societyReceiptOnholds = newCollection;
                }
                return _societyReceiptOnholds;
            }
            set
            {
                if (!ReferenceEquals(_societyReceiptOnholds, value))
                {
                    var previousValue = _societyReceiptOnholds as FixupCollection<SocietyReceiptOnhold>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceiptOnholds;
                    }
                    _societyReceiptOnholds = value;
                    var newValue = value as FixupCollection<SocietyReceiptOnhold>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceiptOnholds;
                    }
                }
            }
        }
        private ICollection<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Association Fixup
    
        private void FixupSocietyBuilding(SocietyBuilding previousValue)
        {
            if (previousValue != null && previousValue.SocietyBuildingUnits.Contains(this))
            {
                previousValue.SocietyBuildingUnits.Remove(this);
            }
    
            if (SocietyBuilding != null)
            {
                if (!SocietyBuilding.SocietyBuildingUnits.Contains(this))
                {
                    SocietyBuilding.SocietyBuildingUnits.Add(this);
                }
                if (SocietyBuildingID != SocietyBuilding.SocietyBuildingID)
                {
                    SocietyBuildingID = SocietyBuilding.SocietyBuildingID;
                }
            }
        }
    
        private void FixupUnitType(UnitType previousValue)
        {
            if (previousValue != null && previousValue.SocietyBuildingUnits.Contains(this))
            {
                previousValue.SocietyBuildingUnits.Remove(this);
            }
    
            if (UnitType != null)
            {
                if (!UnitType.SocietyBuildingUnits.Contains(this))
                {
                    UnitType.SocietyBuildingUnits.Add(this);
                }
                if (UnitTypeID != UnitType.UnitTypeID)
                {
                    UnitTypeID = UnitType.UnitTypeID;
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitChargeHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitChargeHead item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitChargeHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietySpecialBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySpecialBill item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySpecialBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietySpecialBillUnits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySpecialBillUnit item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySpecialBillUnit item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitSubscriptionBalances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitTransfers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitTransfer item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitTransfer item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceiptOnholds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.NewItems)
                {
                    item.SocietyBuildingUnit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyBuildingUnit, this))
                    {
                        item.SocietyBuildingUnit = null;
                    }
                }
            }
        }

        #endregion

    }
}
