//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietySubscription
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietySubscriptionID
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                if (_societyID != value)
                {
                    if (Society != null && Society.SocietyID != value)
                    {
                        Society = null;
                    }
                    _societyID = value;
                }
            }
        }
        private System.Guid _societyID;
        [Required]
        public virtual System.DateTime SubscriptionStart
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime SubscriptionEnd
        {
            get;
            set;
        }
        [Required]
        public virtual short NoOfMembers
        {
            get { return _noOfMembers; }
            set { _noOfMembers = value; }
        }
        private short _noOfMembers = 0;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
        [Required]
        public virtual short NoOfInvoicedMembers
        {
            get { return _noOfInvoicedMembers; }
            set { _noOfInvoicedMembers = value; }
        }
        private short _noOfInvoicedMembers = 0;
        [Required]
        public virtual short NoOfAdditionalMembers
        {
            get { return _noOfAdditionalMembers; }
            set { _noOfAdditionalMembers = value; }
        }
        private short _noOfAdditionalMembers = 0;
        [Required]
        public virtual byte InvoicedMonths
        {
            get { return _invoicedMonths; }
            set { _invoicedMonths = value; }
        }
        private byte _invoicedMonths = 0;
        [Required]
        public virtual bool Closed
        {
            get { return _closed; }
            set { _closed = value; }
        }
        private bool _closed = false;
        public virtual Nullable<System.DateTime> PaidTillDate
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> LockedTillDate
        {
            get;
            set;
        }
        [Required]
        public virtual byte SubscribedMonths
        {
            get { return _subscribedMonths; }
            set { _subscribedMonths = value; }
        }
        private byte _subscribedMonths = 0;
        [Required]
        public virtual int PaidMonths
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual ICollection<SocietySubscriptionInvoice> SocietySubscriptionInvoices
        {
            get
            {
                if (_societySubscriptionInvoices == null)
                {
                    var newCollection = new FixupCollection<SocietySubscriptionInvoice>();
                    newCollection.CollectionChanged += FixupSocietySubscriptionInvoices;
                    _societySubscriptionInvoices = newCollection;
                }
                return _societySubscriptionInvoices;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptionInvoices, value))
                {
                    var previousValue = _societySubscriptionInvoices as FixupCollection<SocietySubscriptionInvoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptionInvoices;
                    }
                    _societySubscriptionInvoices = value;
                    var newValue = value as FixupCollection<SocietySubscriptionInvoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptionInvoices;
                    }
                }
            }
        }
        private ICollection<SocietySubscriptionInvoice> _societySubscriptionInvoices;
    
        public virtual ICollection<SocietySubscriptionService> SocietySubscriptionServices
        {
            get
            {
                if (_societySubscriptionServices == null)
                {
                    var newCollection = new FixupCollection<SocietySubscriptionService>();
                    newCollection.CollectionChanged += FixupSocietySubscriptionServices;
                    _societySubscriptionServices = newCollection;
                }
                return _societySubscriptionServices;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptionServices, value))
                {
                    var previousValue = _societySubscriptionServices as FixupCollection<SocietySubscriptionService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptionServices;
                    }
                    _societySubscriptionServices = value;
                    var newValue = value as FixupCollection<SocietySubscriptionService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptionServices;
                    }
                }
            }
        }
        private ICollection<SocietySubscriptionService> _societySubscriptionServices;
    
        public virtual ICollection<AcTransaction> AcTransactions
        {
            get
            {
                if (_acTransactions == null)
                {
                    var newCollection = new FixupCollection<AcTransaction>();
                    newCollection.CollectionChanged += FixupAcTransactions;
                    _acTransactions = newCollection;
                }
                return _acTransactions;
            }
            set
            {
                if (!ReferenceEquals(_acTransactions, value))
                {
                    var previousValue = _acTransactions as FixupCollection<AcTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactions;
                    }
                    _acTransactions = value;
                    var newValue = value as FixupCollection<AcTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactions;
                    }
                }
            }
        }
        private ICollection<AcTransaction> _acTransactions;
    
        public virtual ICollection<SocietyBuildingUnitSubscriptionBalance> SocietyBuildingUnitSubscriptionBalances
        {
            get
            {
                if (_societyBuildingUnitSubscriptionBalances == null)
                {
                    var newCollection = new FixupCollection<SocietyBuildingUnitSubscriptionBalance>();
                    newCollection.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    _societyBuildingUnitSubscriptionBalances = newCollection;
                }
                return _societyBuildingUnitSubscriptionBalances;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildingUnitSubscriptionBalances, value))
                {
                    var previousValue = _societyBuildingUnitSubscriptionBalances as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                    _societyBuildingUnitSubscriptionBalances = value;
                    var newValue = value as FixupCollection<SocietyBuildingUnitSubscriptionBalance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildingUnitSubscriptionBalances;
                    }
                }
            }
        }
        private ICollection<SocietyBuildingUnitSubscriptionBalance> _societyBuildingUnitSubscriptionBalances;
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;
    
        public virtual ICollection<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get
            {
                if (_societyReceiptOnholds == null)
                {
                    var newCollection = new FixupCollection<SocietyReceiptOnhold>();
                    newCollection.CollectionChanged += FixupSocietyReceiptOnholds;
                    _societyReceiptOnholds = newCollection;
                }
                return _societyReceiptOnholds;
            }
            set
            {
                if (!ReferenceEquals(_societyReceiptOnholds, value))
                {
                    var previousValue = _societyReceiptOnholds as FixupCollection<SocietyReceiptOnhold>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceiptOnholds;
                    }
                    _societyReceiptOnholds = value;
                    var newValue = value as FixupCollection<SocietyReceiptOnhold>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceiptOnholds;
                    }
                }
            }
        }
        private ICollection<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Association Fixup
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.SocietySubscriptions.Contains(this))
            {
                previousValue.SocietySubscriptions.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.SocietySubscriptions.Contains(this))
                {
                    Society.SocietySubscriptions.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupSocietySubscriptionInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscriptionInvoice item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscriptionInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietySubscriptionServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscriptionService item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscriptionService item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransaction item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildingUnitSubscriptionBalances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuildingUnitSubscriptionBalance item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceiptOnholds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.NewItems)
                {
                    item.SocietySubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietySubscription, this))
                    {
                        item.SocietySubscription = null;
                    }
                }
            }
        }

        #endregion

    }
}
