//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class ServiceType
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid ServiceTypeID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Type
        {
            get;
            set;
        }
        public virtual Nullable<bool> Mandatory
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        [Required]
        public virtual string Chargeability
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        [Required]
        public virtual string Basis
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        public virtual string Nature
        {
            get;
            set;
        }
        [Required]
        public virtual byte Sequence
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
    	
        [StringLength(2, ErrorMessage="Number of  characters cannot be more than 2")]
        [Required]
        public virtual string ChargeabilityBasis
        {
            get { return _chargeabilityBasis; }
            set { _chargeabilityBasis = value; }
        }
        private string _chargeabilityBasis = "MM";

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SocietySubscriptionInvoiceService> SocietySubscriptionInvoiceServices
        {
            get
            {
                if (_societySubscriptionInvoiceServices == null)
                {
                    var newCollection = new FixupCollection<SocietySubscriptionInvoiceService>();
                    newCollection.CollectionChanged += FixupSocietySubscriptionInvoiceServices;
                    _societySubscriptionInvoiceServices = newCollection;
                }
                return _societySubscriptionInvoiceServices;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptionInvoiceServices, value))
                {
                    var previousValue = _societySubscriptionInvoiceServices as FixupCollection<SocietySubscriptionInvoiceService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptionInvoiceServices;
                    }
                    _societySubscriptionInvoiceServices = value;
                    var newValue = value as FixupCollection<SocietySubscriptionInvoiceService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptionInvoiceServices;
                    }
                }
            }
        }
        private ICollection<SocietySubscriptionInvoiceService> _societySubscriptionInvoiceServices;
    
        public virtual ICollection<SocietySubscriptionService> SocietySubscriptionServices
        {
            get
            {
                if (_societySubscriptionServices == null)
                {
                    var newCollection = new FixupCollection<SocietySubscriptionService>();
                    newCollection.CollectionChanged += FixupSocietySubscriptionServices;
                    _societySubscriptionServices = newCollection;
                }
                return _societySubscriptionServices;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptionServices, value))
                {
                    var previousValue = _societySubscriptionServices as FixupCollection<SocietySubscriptionService>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptionServices;
                    }
                    _societySubscriptionServices = value;
                    var newValue = value as FixupCollection<SocietySubscriptionService>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptionServices;
                    }
                }
            }
        }
        private ICollection<SocietySubscriptionService> _societySubscriptionServices;
    
        public virtual ICollection<TariffRate> TariffRates
        {
            get
            {
                if (_tariffRates == null)
                {
                    var newCollection = new FixupCollection<TariffRate>();
                    newCollection.CollectionChanged += FixupTariffRates;
                    _tariffRates = newCollection;
                }
                return _tariffRates;
            }
            set
            {
                if (!ReferenceEquals(_tariffRates, value))
                {
                    var previousValue = _tariffRates as FixupCollection<TariffRate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTariffRates;
                    }
                    _tariffRates = value;
                    var newValue = value as FixupCollection<TariffRate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTariffRates;
                    }
                }
            }
        }
        private ICollection<TariffRate> _tariffRates;

        #endregion

        #region Association Fixup
    
        private void FixupSocietySubscriptionInvoiceServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscriptionInvoiceService item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscriptionInvoiceService item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }
    
        private void FixupSocietySubscriptionServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscriptionService item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscriptionService item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }
    
        private void FixupTariffRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TariffRate item in e.NewItems)
                {
                    item.ServiceType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TariffRate item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceType, this))
                    {
                        item.ServiceType = null;
                    }
                }
            }
        }

        #endregion

    }
}
