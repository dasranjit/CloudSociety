//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class AcTransaction
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid AcTransactionID
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (AcHead != null && AcHead.SocietyID != value)
                        {
                            var previousValue = _acHead;
                            _acHead = null;
                            FixupAcHead(previousValue, skipKeys: true);
                        }
                        if (Society != null && Society.SocietyID != value)
                        {
                            Society = null;
                        }
                        if (SocietyPayMode != null && SocietyPayMode.SocietyID != value)
                        {
                            var previousValue = _societyPayMode;
                            _societyPayMode = null;
                            FixupSocietyPayMode(previousValue, skipKeys: true);
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyID;
    	
        [StringLength(2, ErrorMessage="Number of  characters cannot be more than 2")]
        [Required]
        public virtual string DocType
        {
            get;
            set;
        }
        public virtual Nullable<int> Serial
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string DocNo
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime DocDate
        {
            get;
            set;
        }
    	
        [StringLength(255, ErrorMessage="Number of  characters cannot be more than 255")]
        public virtual string Particulars
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> AcHeadID
        {
            get { return _acHeadID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_acHeadID != value)
                    {
                        if (AcHead != null && AcHead.AcHeadID != value)
                        {
                            var previousValue = _acHead;
                            _acHead = null;
                            FixupAcHead(previousValue, skipKeys: true);
                        }
                        _acHeadID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _acHeadID;
    	
        [StringLength(2, ErrorMessage="Number of  characters cannot be more than 2")]
        public virtual string PayModeCode
        {
            get { return _payModeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_payModeCode != value)
                    {
                        if (SocietyPayMode != null && SocietyPayMode.PayModeCode != value)
                        {
                            var previousValue = _societyPayMode;
                            _societyPayMode = null;
                            FixupSocietyPayMode(previousValue, skipKeys: true);
                        }
                        _payModeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _payModeCode;
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        public virtual string PayRefNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> PayRefDate
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> BankID
        {
            get { return _bankID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_bankID != value)
                    {
                        if (Bank != null && Bank.BankID != value)
                        {
                            Bank = null;
                        }
                        _bankID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _bankID;
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string Branch
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string BillNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> BillDate
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string DelDocNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> DelDocDate
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietySubscriptionID
        {
            get { return _societySubscriptionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societySubscriptionID != value)
                    {
                        if (SocietySubscription != null && SocietySubscription.SocietySubscriptionID != value)
                        {
                            SocietySubscription = null;
                        }
                        _societySubscriptionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societySubscriptionID;
    	
        [StringLength(9, ErrorMessage="Number of  characters cannot be more than 9")]
        public virtual string AcYear
        {
            get;
            set;
        }
        public virtual Nullable<decimal> DrAmount
        {
            get;
            set;
        }
        public virtual Nullable<decimal> CrAmount
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual AcHead AcHead
        {
            get { return _acHead; }
            set
            {
                if (!ReferenceEquals(_acHead, value))
                {
                    var previousValue = _acHead;
                    _acHead = value;
                    FixupAcHead(previousValue);
                }
            }
        }
        private AcHead _acHead;
    
        public virtual ICollection<AcTransactionAc> AcTransactionAcs
        {
            get
            {
                if (_acTransactionAcs == null)
                {
                    var newCollection = new FixupCollection<AcTransactionAc>();
                    newCollection.CollectionChanged += FixupAcTransactionAcs;
                    _acTransactionAcs = newCollection;
                }
                return _acTransactionAcs;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionAcs, value))
                {
                    var previousValue = _acTransactionAcs as FixupCollection<AcTransactionAc>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionAcs;
                    }
                    _acTransactionAcs = value;
                    var newValue = value as FixupCollection<AcTransactionAc>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionAcs;
                    }
                }
            }
        }
        private ICollection<AcTransactionAc> _acTransactionAcs;
    
        public virtual Bank Bank
        {
            get { return _bank; }
            set
            {
                if (!ReferenceEquals(_bank, value))
                {
                    var previousValue = _bank;
                    _bank = value;
                    FixupBank(previousValue);
                }
            }
        }
        private Bank _bank;
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual SocietyPayMode SocietyPayMode
        {
            get { return _societyPayMode; }
            set
            {
                if (!ReferenceEquals(_societyPayMode, value))
                {
                    var previousValue = _societyPayMode;
                    _societyPayMode = value;
                    FixupSocietyPayMode(previousValue);
                }
            }
        }
        private SocietyPayMode _societyPayMode;
    
        public virtual ICollection<AcTransactionTDS> AcTransactionTDS
        {
            get
            {
                if (_acTransactionTDS == null)
                {
                    var newCollection = new FixupCollection<AcTransactionTDS>();
                    newCollection.CollectionChanged += FixupAcTransactionTDS;
                    _acTransactionTDS = newCollection;
                }
                return _acTransactionTDS;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionTDS, value))
                {
                    var previousValue = _acTransactionTDS as FixupCollection<AcTransactionTDS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionTDS;
                    }
                    _acTransactionTDS = value;
                    var newValue = value as FixupCollection<AcTransactionTDS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionTDS;
                    }
                }
            }
        }
        private ICollection<AcTransactionTDS> _acTransactionTDS;
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual SocietySubscription SocietySubscription
        {
            get { return _societySubscription; }
            set
            {
                if (!ReferenceEquals(_societySubscription, value))
                {
                    var previousValue = _societySubscription;
                    _societySubscription = value;
                    FixupSocietySubscription(previousValue);
                }
            }
        }
        private SocietySubscription _societySubscription;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAcHead(AcHead previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.AcTransactions.Contains(this))
            {
                previousValue.AcTransactions.Remove(this);
            }
    
            if (AcHead != null)
            {
                if (!AcHead.AcTransactions.Contains(this))
                {
                    AcHead.AcTransactions.Add(this);
                }
                if (SocietyID != AcHead.SocietyID)
                {
                    SocietyID = AcHead.SocietyID;
                }
                if (AcHeadID != AcHead.AcHeadID)
                {
                    AcHeadID = AcHead.AcHeadID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                AcHeadID = null;
            }
        }
    
        private void FixupBank(Bank previousValue)
        {
            if (previousValue != null && previousValue.AcTransactions.Contains(this))
            {
                previousValue.AcTransactions.Remove(this);
            }
    
            if (Bank != null)
            {
                if (!Bank.AcTransactions.Contains(this))
                {
                    Bank.AcTransactions.Add(this);
                }
                if (BankID != Bank.BankID)
                {
                    BankID = Bank.BankID;
                }
            }
            else if (!_settingFK)
            {
                BankID = null;
            }
        }
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.AcTransactions.Contains(this))
            {
                previousValue.AcTransactions.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.AcTransactions.Contains(this))
                {
                    Society.AcTransactions.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupSocietyPayMode(SocietyPayMode previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.AcTransactions.Contains(this))
            {
                previousValue.AcTransactions.Remove(this);
            }
    
            if (SocietyPayMode != null)
            {
                if (!SocietyPayMode.AcTransactions.Contains(this))
                {
                    SocietyPayMode.AcTransactions.Add(this);
                }
                if (SocietyID != SocietyPayMode.SocietyID)
                {
                    SocietyID = SocietyPayMode.SocietyID;
                }
                if (PayModeCode != SocietyPayMode.PayModeCode)
                {
                    PayModeCode = SocietyPayMode.PayModeCode;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                PayModeCode = null;
            }
        }
    
        private void FixupSocietySubscription(SocietySubscription previousValue)
        {
            if (previousValue != null && previousValue.AcTransactions.Contains(this))
            {
                previousValue.AcTransactions.Remove(this);
            }
    
            if (SocietySubscription != null)
            {
                if (!SocietySubscription.AcTransactions.Contains(this))
                {
                    SocietySubscription.AcTransactions.Add(this);
                }
                if (SocietySubscriptionID != SocietySubscription.SocietySubscriptionID)
                {
                    SocietySubscriptionID = SocietySubscription.SocietySubscriptionID;
                }
            }
        }
    
        private void FixupAcTransactionAcs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionAc item in e.NewItems)
                {
                    item.AcTransaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionAc item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcTransaction, this))
                    {
                        item.AcTransaction = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionTDS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionTDS item in e.NewItems)
                {
                    item.AcTransaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionTDS item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcTransaction, this))
                    {
                        item.AcTransaction = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.AcTransaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcTransaction, this))
                    {
                        item.AcTransaction = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.AcTransaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcTransaction, this))
                    {
                        item.AcTransaction = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.AcTransaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcTransaction, this))
                    {
                        item.AcTransaction = null;
                    }
                }
            }
        }

        #endregion

    }
}
