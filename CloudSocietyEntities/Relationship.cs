//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Relationship
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid RelationshipID
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
        [Required]
        public virtual bool Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private bool _active = true;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SocietyMemberNominee> SocietyMemberNominees
        {
            get
            {
                if (_societyMemberNominees == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberNominee>();
                    newCollection.CollectionChanged += FixupSocietyMemberNominees;
                    _societyMemberNominees = newCollection;
                }
                return _societyMemberNominees;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberNominees, value))
                {
                    var previousValue = _societyMemberNominees as FixupCollection<SocietyMemberNominee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberNominees;
                    }
                    _societyMemberNominees = value;
                    var newValue = value as FixupCollection<SocietyMemberNominee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberNominees;
                    }
                }
            }
        }
        private ICollection<SocietyMemberNominee> _societyMemberNominees;

        #endregion

        #region Association Fixup
    
        private void FixupSocietyMemberNominees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberNominee item in e.NewItems)
                {
                    item.RelationshipEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberNominee item in e.OldItems)
                {
                    if (ReferenceEquals(item.RelationshipEntity, this))
                    {
                        item.RelationshipEntity = null;
                    }
                }
            }
        }

        #endregion

    }
}
