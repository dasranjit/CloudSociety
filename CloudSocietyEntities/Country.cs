//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Country
    {
        #region Primitive Properties
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        [Required]
        public virtual string CountryCode
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AcHead> AcHeads
        {
            get
            {
                if (_acHeads == null)
                {
                    var newCollection = new FixupCollection<AcHead>();
                    newCollection.CollectionChanged += FixupAcHeads;
                    _acHeads = newCollection;
                }
                return _acHeads;
            }
            set
            {
                if (!ReferenceEquals(_acHeads, value))
                {
                    var previousValue = _acHeads as FixupCollection<AcHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcHeads;
                    }
                    _acHeads = value;
                    var newValue = value as FixupCollection<AcHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcHeads;
                    }
                }
            }
        }
        private ICollection<AcHead> _acHeads;
    
        public virtual ICollection<Society> Societies
        {
            get
            {
                if (_societies == null)
                {
                    var newCollection = new FixupCollection<Society>();
                    newCollection.CollectionChanged += FixupSocieties;
                    _societies = newCollection;
                }
                return _societies;
            }
            set
            {
                if (!ReferenceEquals(_societies, value))
                {
                    var previousValue = _societies as FixupCollection<Society>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocieties;
                    }
                    _societies = value;
                    var newValue = value as FixupCollection<Society>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocieties;
                    }
                }
            }
        }
        private ICollection<Society> _societies;
    
        public virtual ICollection<SocietyMemberJointHolder> SocietyMemberJointHolders
        {
            get
            {
                if (_societyMemberJointHolders == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberJointHolder>();
                    newCollection.CollectionChanged += FixupSocietyMemberJointHolders;
                    _societyMemberJointHolders = newCollection;
                }
                return _societyMemberJointHolders;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberJointHolders, value))
                {
                    var previousValue = _societyMemberJointHolders as FixupCollection<SocietyMemberJointHolder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberJointHolders;
                    }
                    _societyMemberJointHolders = value;
                    var newValue = value as FixupCollection<SocietyMemberJointHolder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberJointHolders;
                    }
                }
            }
        }
        private ICollection<SocietyMemberJointHolder> _societyMemberJointHolders;
    
        public virtual ICollection<SocietyMemberNominee> SocietyMemberNominees
        {
            get
            {
                if (_societyMemberNominees == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberNominee>();
                    newCollection.CollectionChanged += FixupSocietyMemberNominees;
                    _societyMemberNominees = newCollection;
                }
                return _societyMemberNominees;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberNominees, value))
                {
                    var previousValue = _societyMemberNominees as FixupCollection<SocietyMemberNominee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberNominees;
                    }
                    _societyMemberNominees = value;
                    var newValue = value as FixupCollection<SocietyMemberNominee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberNominees;
                    }
                }
            }
        }
        private ICollection<SocietyMemberNominee> _societyMemberNominees;
    
        public virtual ICollection<SocietyMember> SocietyMembers
        {
            get
            {
                if (_societyMembers == null)
                {
                    var newCollection = new FixupCollection<SocietyMember>();
                    newCollection.CollectionChanged += FixupSocietyMembers;
                    _societyMembers = newCollection;
                }
                return _societyMembers;
            }
            set
            {
                if (!ReferenceEquals(_societyMembers, value))
                {
                    var previousValue = _societyMembers as FixupCollection<SocietyMember>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMembers;
                    }
                    _societyMembers = value;
                    var newValue = value as FixupCollection<SocietyMember>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMembers;
                    }
                }
            }
        }
        private ICollection<SocietyMember> _societyMembers;
    
        public virtual ICollection<SocietyMemberTenant> SocietyMemberTenants
        {
            get
            {
                if (_societyMemberTenants == null)
                {
                    var newCollection = new FixupCollection<SocietyMemberTenant>();
                    newCollection.CollectionChanged += FixupSocietyMemberTenants;
                    _societyMemberTenants = newCollection;
                }
                return _societyMemberTenants;
            }
            set
            {
                if (!ReferenceEquals(_societyMemberTenants, value))
                {
                    var previousValue = _societyMemberTenants as FixupCollection<SocietyMemberTenant>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMemberTenants;
                    }
                    _societyMemberTenants = value;
                    var newValue = value as FixupCollection<SocietyMemberTenant>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMemberTenants;
                    }
                }
            }
        }
        private ICollection<SocietyMemberTenant> _societyMemberTenants;
    
        public virtual ICollection<State> States
        {
            get
            {
                if (_states == null)
                {
                    var newCollection = new FixupCollection<State>();
                    newCollection.CollectionChanged += FixupStates;
                    _states = newCollection;
                }
                return _states;
            }
            set
            {
                if (!ReferenceEquals(_states, value))
                {
                    var previousValue = _states as FixupCollection<State>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStates;
                    }
                    _states = value;
                    var newValue = value as FixupCollection<State>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStates;
                    }
                }
            }
        }
        private ICollection<State> _states;
    
        public virtual ICollection<Subscriber> Subscribers
        {
            get
            {
                if (_subscribers == null)
                {
                    var newCollection = new FixupCollection<Subscriber>();
                    newCollection.CollectionChanged += FixupSubscribers;
                    _subscribers = newCollection;
                }
                return _subscribers;
            }
            set
            {
                if (!ReferenceEquals(_subscribers, value))
                {
                    var previousValue = _subscribers as FixupCollection<Subscriber>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscribers;
                    }
                    _subscribers = value;
                    var newValue = value as FixupCollection<Subscriber>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscribers;
                    }
                }
            }
        }
        private ICollection<Subscriber> _subscribers;

        #endregion

        #region Association Fixup
    
        private void FixupAcHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcHead item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSocieties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Society item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Society item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberJointHolders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberJointHolder item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberJointHolder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberNominees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberNominee item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberNominee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMember item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMember item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMemberTenants(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMemberTenant item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMemberTenant item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupStates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (State item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (State item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }
    
        private void FixupSubscribers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Subscriber item in e.NewItems)
                {
                    item.Country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Subscriber item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                }
            }
        }

        #endregion

    }
}
