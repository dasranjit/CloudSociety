//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class TDSCategory
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid TDSCategoryID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Category
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> AcHeadID
        {
            get { return _acHeadID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_acHeadID != value)
                    {
                        if (StandardAcHead != null && StandardAcHead.AcHeadID != value)
                        {
                            StandardAcHead = null;
                        }
                        _acHeadID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _acHeadID;
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        public virtual string Section
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AcHead> AcHeads
        {
            get
            {
                if (_acHeads == null)
                {
                    var newCollection = new FixupCollection<AcHead>();
                    newCollection.CollectionChanged += FixupAcHeads;
                    _acHeads = newCollection;
                }
                return _acHeads;
            }
            set
            {
                if (!ReferenceEquals(_acHeads, value))
                {
                    var previousValue = _acHeads as FixupCollection<AcHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcHeads;
                    }
                    _acHeads = value;
                    var newValue = value as FixupCollection<AcHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcHeads;
                    }
                }
            }
        }
        private ICollection<AcHead> _acHeads;
    
        public virtual ICollection<AcTransactionTDS> AcTransactionTDS
        {
            get
            {
                if (_acTransactionTDS == null)
                {
                    var newCollection = new FixupCollection<AcTransactionTDS>();
                    newCollection.CollectionChanged += FixupAcTransactionTDS;
                    _acTransactionTDS = newCollection;
                }
                return _acTransactionTDS;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionTDS, value))
                {
                    var previousValue = _acTransactionTDS as FixupCollection<AcTransactionTDS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionTDS;
                    }
                    _acTransactionTDS = value;
                    var newValue = value as FixupCollection<AcTransactionTDS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionTDS;
                    }
                }
            }
        }
        private ICollection<AcTransactionTDS> _acTransactionTDS;
    
        public virtual ICollection<StandardAcHead> StandardAcHeads
        {
            get
            {
                if (_standardAcHeads == null)
                {
                    var newCollection = new FixupCollection<StandardAcHead>();
                    newCollection.CollectionChanged += FixupStandardAcHeads;
                    _standardAcHeads = newCollection;
                }
                return _standardAcHeads;
            }
            set
            {
                if (!ReferenceEquals(_standardAcHeads, value))
                {
                    var previousValue = _standardAcHeads as FixupCollection<StandardAcHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStandardAcHeads;
                    }
                    _standardAcHeads = value;
                    var newValue = value as FixupCollection<StandardAcHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStandardAcHeads;
                    }
                }
            }
        }
        private ICollection<StandardAcHead> _standardAcHeads;
    
        public virtual StandardAcHead StandardAcHead
        {
            get { return _standardAcHead; }
            set
            {
                if (!ReferenceEquals(_standardAcHead, value))
                {
                    var previousValue = _standardAcHead;
                    _standardAcHead = value;
                    FixupStandardAcHead(previousValue);
                }
            }
        }
        private StandardAcHead _standardAcHead;
    
        public virtual ICollection<TDSCategoryRate> TDSCategoryRates
        {
            get
            {
                if (_tDSCategoryRates == null)
                {
                    var newCollection = new FixupCollection<TDSCategoryRate>();
                    newCollection.CollectionChanged += FixupTDSCategoryRates;
                    _tDSCategoryRates = newCollection;
                }
                return _tDSCategoryRates;
            }
            set
            {
                if (!ReferenceEquals(_tDSCategoryRates, value))
                {
                    var previousValue = _tDSCategoryRates as FixupCollection<TDSCategoryRate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTDSCategoryRates;
                    }
                    _tDSCategoryRates = value;
                    var newValue = value as FixupCollection<TDSCategoryRate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTDSCategoryRates;
                    }
                }
            }
        }
        private ICollection<TDSCategoryRate> _tDSCategoryRates;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupStandardAcHead(StandardAcHead previousValue)
        {
            if (previousValue != null && previousValue.TDSCategories.Contains(this))
            {
                previousValue.TDSCategories.Remove(this);
            }
    
            if (StandardAcHead != null)
            {
                if (!StandardAcHead.TDSCategories.Contains(this))
                {
                    StandardAcHead.TDSCategories.Add(this);
                }
                if (AcHeadID != StandardAcHead.AcHeadID)
                {
                    AcHeadID = StandardAcHead.AcHeadID;
                }
            }
            else if (!_settingFK)
            {
                AcHeadID = null;
            }
        }
    
        private void FixupAcHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcHead item in e.NewItems)
                {
                    item.TDSCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDSCategory, this))
                    {
                        item.TDSCategory = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionTDS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionTDS item in e.NewItems)
                {
                    item.TDSCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionTDS item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDSCategory, this))
                    {
                        item.TDSCategory = null;
                    }
                }
            }
        }
    
        private void FixupStandardAcHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StandardAcHead item in e.NewItems)
                {
                    item.TDSCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StandardAcHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDSCategory, this))
                    {
                        item.TDSCategory = null;
                    }
                }
            }
        }
    
        private void FixupTDSCategoryRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TDSCategoryRate item in e.NewItems)
                {
                    item.TDSCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDSCategoryRate item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDSCategory, this))
                    {
                        item.TDSCategory = null;
                    }
                }
            }
        }

        #endregion

    }
}
