//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SubscriptionInvoice
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SubscriptionInvoiceID
        {
            get;
            set;
        }
    	
        [StringLength(23, ErrorMessage="Number of  characters cannot be more than 23")]
        public virtual string InvoiceNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> InvoiceDate
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> SubscriberID
        {
            get { return _subscriberID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subscriberID != value)
                    {
                        if (Subscriber != null && Subscriber.SubscriberID != value)
                        {
                            Subscriber = null;
                        }
                        _subscriberID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _subscriberID;
    	
        [StringLength(20, ErrorMessage="Number of  characters cannot be more than 20")]
        public virtual string CouponNo
        {
            get { return _couponNo; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_couponNo != value)
                    {
                        if (Coupon != null && Coupon.CouponNo != value)
                        {
                            Coupon = null;
                        }
                        _couponNo = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _couponNo;
        [Required]
        public virtual decimal Amount
        {
            get;
            set;
        }
        public virtual Nullable<decimal> Discount
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string Tax
        {
            get;
            set;
        }
        public virtual Nullable<decimal> TaxAmount
        {
            get;
            set;
        }
        public virtual Nullable<decimal> InvoiceAmount
        {
            get;
            set;
        }
        public virtual Nullable<decimal> PaidAmount
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> PaidOn
        {
            get;
            set;
        }
    	
        [StringLength(2, ErrorMessage="Number of  characters cannot be more than 2")]
        public virtual string PayModeCode
        {
            get { return _payModeCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_payModeCode != value)
                    {
                        if (PayMode != null && PayMode.PayModeCode != value)
                        {
                            PayMode = null;
                        }
                        _payModeCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _payModeCode;
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        public virtual string PayRefNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> PayRefDate
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> BankID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string Branch
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> DueDate
        {
            get;
            set;
        }
    	
        [StringLength(9, ErrorMessage="Number of  characters cannot be more than 9")]
        public virtual string AcYear
        {
            get;
            set;
        }
        public virtual Nullable<int> Serial
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid TariffID
        {
            get { return _tariffID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_tariffID != value)
                    {
                        if (Tariff != null && Tariff.TariffID != value)
                        {
                            Tariff = null;
                        }
                        _tariffID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _tariffID;
        public virtual Nullable<System.Guid> SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (Society != null && Society.SocietyID != value)
                        {
                            Society = null;
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _societyID;

        #endregion

        #region Navigation Properties
    
        public virtual Coupon Coupon
        {
            get { return _coupon; }
            set
            {
                if (!ReferenceEquals(_coupon, value))
                {
                    var previousValue = _coupon;
                    _coupon = value;
                    FixupCoupon(previousValue);
                }
            }
        }
        private Coupon _coupon;
    
        public virtual PayMode PayMode
        {
            get { return _payMode; }
            set
            {
                if (!ReferenceEquals(_payMode, value))
                {
                    var previousValue = _payMode;
                    _payMode = value;
                    FixupPayMode(previousValue);
                }
            }
        }
        private PayMode _payMode;
    
        public virtual ICollection<SocietySubscriptionInvoice> SocietySubscriptionInvoices
        {
            get
            {
                if (_societySubscriptionInvoices == null)
                {
                    var newCollection = new FixupCollection<SocietySubscriptionInvoice>();
                    newCollection.CollectionChanged += FixupSocietySubscriptionInvoices;
                    _societySubscriptionInvoices = newCollection;
                }
                return _societySubscriptionInvoices;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptionInvoices, value))
                {
                    var previousValue = _societySubscriptionInvoices as FixupCollection<SocietySubscriptionInvoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptionInvoices;
                    }
                    _societySubscriptionInvoices = value;
                    var newValue = value as FixupCollection<SocietySubscriptionInvoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptionInvoices;
                    }
                }
            }
        }
        private ICollection<SocietySubscriptionInvoice> _societySubscriptionInvoices;
    
        public virtual Tariff Tariff
        {
            get { return _tariff; }
            set
            {
                if (!ReferenceEquals(_tariff, value))
                {
                    var previousValue = _tariff;
                    _tariff = value;
                    FixupTariff(previousValue);
                }
            }
        }
        private Tariff _tariff;
    
        public virtual Subscriber Subscriber
        {
            get { return _subscriber; }
            set
            {
                if (!ReferenceEquals(_subscriber, value))
                {
                    var previousValue = _subscriber;
                    _subscriber = value;
                    FixupSubscriber(previousValue);
                }
            }
        }
        private Subscriber _subscriber;
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCoupon(Coupon previousValue)
        {
            if (previousValue != null && previousValue.SubscriptionInvoices.Contains(this))
            {
                previousValue.SubscriptionInvoices.Remove(this);
            }
    
            if (Coupon != null)
            {
                if (!Coupon.SubscriptionInvoices.Contains(this))
                {
                    Coupon.SubscriptionInvoices.Add(this);
                }
                if (CouponNo != Coupon.CouponNo)
                {
                    CouponNo = Coupon.CouponNo;
                }
            }
            else if (!_settingFK)
            {
                CouponNo = null;
            }
        }
    
        private void FixupPayMode(PayMode previousValue)
        {
            if (previousValue != null && previousValue.SubscriptionInvoices.Contains(this))
            {
                previousValue.SubscriptionInvoices.Remove(this);
            }
    
            if (PayMode != null)
            {
                if (!PayMode.SubscriptionInvoices.Contains(this))
                {
                    PayMode.SubscriptionInvoices.Add(this);
                }
                if (PayModeCode != PayMode.PayModeCode)
                {
                    PayModeCode = PayMode.PayModeCode;
                }
            }
            else if (!_settingFK)
            {
                PayModeCode = null;
            }
        }
    
        private void FixupTariff(Tariff previousValue)
        {
            if (previousValue != null && previousValue.SubscriptionInvoices.Contains(this))
            {
                previousValue.SubscriptionInvoices.Remove(this);
            }
    
            if (Tariff != null)
            {
                if (!Tariff.SubscriptionInvoices.Contains(this))
                {
                    Tariff.SubscriptionInvoices.Add(this);
                }
                if (TariffID != Tariff.TariffID)
                {
                    TariffID = Tariff.TariffID;
                }
            }
        }
    
        private void FixupSubscriber(Subscriber previousValue)
        {
            if (previousValue != null && previousValue.SubscriptionInvoices.Contains(this))
            {
                previousValue.SubscriptionInvoices.Remove(this);
            }
    
            if (Subscriber != null)
            {
                if (!Subscriber.SubscriptionInvoices.Contains(this))
                {
                    Subscriber.SubscriptionInvoices.Add(this);
                }
                if (SubscriberID != Subscriber.SubscriberID)
                {
                    SubscriberID = Subscriber.SubscriberID;
                }
            }
            else if (!_settingFK)
            {
                SubscriberID = null;
            }
        }
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.SubscriptionInvoices.Contains(this))
            {
                previousValue.SubscriptionInvoices.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.SubscriptionInvoices.Contains(this))
                {
                    Society.SubscriptionInvoices.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
            else if (!_settingFK)
            {
                SocietyID = null;
            }
        }
    
        private void FixupSocietySubscriptionInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscriptionInvoice item in e.NewItems)
                {
                    item.SubscriptionInvoice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscriptionInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubscriptionInvoice, this))
                    {
                        item.SubscriptionInvoice = null;
                    }
                }
            }
        }

        #endregion

    }
}
