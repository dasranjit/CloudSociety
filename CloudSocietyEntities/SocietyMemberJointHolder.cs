//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietyMemberJointHolder
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyMemberJointHolderID
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SocietyMemberID
        {
            get { return _societyMemberID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyMemberID != value)
                    {
                        if (SocietyMember != null && SocietyMember.SocietyMemberID != value)
                        {
                            SocietyMember = null;
                        }
                        _societyMemberID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyMemberID;
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid MemberClassID
        {
            get { return _memberClassID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberClassID != value)
                    {
                        if (MemberClass != null && MemberClass.MemberClassID != value)
                        {
                            MemberClass = null;
                        }
                        _memberClassID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _memberClassID;
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> EnteranceFeePaidOn
        {
            get;
            set;
        }
        public virtual string Address
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string City
        {
            get;
            set;
        }
        public virtual Nullable<decimal> PIN
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> StateID
        {
            get { return _stateID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateID != value)
                    {
                        if (State != null && State.StateID != value)
                        {
                            State = null;
                        }
                        _stateID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _stateID;
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        public virtual string CountryCode
        {
            get { return _countryCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryCode != value)
                    {
                        if (Country != null && Country.CountryCode != value)
                        {
                            Country = null;
                        }
                        _countryCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _countryCode;
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string PhoneNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string OfficePhoneNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string MobileNo
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string EMailId
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual MemberClass MemberClass
        {
            get { return _memberClass; }
            set
            {
                if (!ReferenceEquals(_memberClass, value))
                {
                    var previousValue = _memberClass;
                    _memberClass = value;
                    FixupMemberClass(previousValue);
                }
            }
        }
        private MemberClass _memberClass;
    
        public virtual SocietyMember SocietyMember
        {
            get { return _societyMember; }
            set
            {
                if (!ReferenceEquals(_societyMember, value))
                {
                    var previousValue = _societyMember;
                    _societyMember = value;
                    FixupSocietyMember(previousValue);
                }
            }
        }
        private SocietyMember _societyMember;
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.SocietyMemberJointHolders.Contains(this))
            {
                previousValue.SocietyMemberJointHolders.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.SocietyMemberJointHolders.Contains(this))
                {
                    Country.SocietyMemberJointHolders.Add(this);
                }
                if (CountryCode != Country.CountryCode)
                {
                    CountryCode = Country.CountryCode;
                }
            }
            else if (!_settingFK)
            {
                CountryCode = null;
            }
        }
    
        private void FixupMemberClass(MemberClass previousValue)
        {
            if (previousValue != null && previousValue.SocietyMemberJointHolders.Contains(this))
            {
                previousValue.SocietyMemberJointHolders.Remove(this);
            }
    
            if (MemberClass != null)
            {
                if (!MemberClass.SocietyMemberJointHolders.Contains(this))
                {
                    MemberClass.SocietyMemberJointHolders.Add(this);
                }
                if (MemberClassID != MemberClass.MemberClassID)
                {
                    MemberClassID = MemberClass.MemberClassID;
                }
            }
        }
    
        private void FixupSocietyMember(SocietyMember previousValue)
        {
            if (previousValue != null && previousValue.SocietyMemberJointHolders.Contains(this))
            {
                previousValue.SocietyMemberJointHolders.Remove(this);
            }
    
            if (SocietyMember != null)
            {
                if (!SocietyMember.SocietyMemberJointHolders.Contains(this))
                {
                    SocietyMember.SocietyMemberJointHolders.Add(this);
                }
                if (SocietyMemberID != SocietyMember.SocietyMemberID)
                {
                    SocietyMemberID = SocietyMember.SocietyMemberID;
                }
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.SocietyMemberJointHolders.Contains(this))
            {
                previousValue.SocietyMemberJointHolders.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.SocietyMemberJointHolders.Contains(this))
                {
                    State.SocietyMemberJointHolders.Add(this);
                }
                if (StateID != State.StateID)
                {
                    StateID = State.StateID;
                }
            }
            else if (!_settingFK)
            {
                StateID = null;
            }
        }

        #endregion

    }
}
