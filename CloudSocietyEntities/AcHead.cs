//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class AcHead
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (AcSubCategory != null && AcSubCategory.SocietyID != value)
                        {
                            AcSubCategory = null;
                        }
                        if (Society != null && Society.SocietyID != value)
                        {
                            Society = null;
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyID;
        [Required]
        public virtual System.Guid AcHeadID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid SubCategoryID
        {
            get { return _subCategoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subCategoryID != value)
                    {
                        if (AcSubCategory != null && AcSubCategory.SubCategoryID != value)
                        {
                            AcSubCategory = null;
                        }
                        _subCategoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _subCategoryID;
        [Required]
        public virtual short Sequence
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        public virtual string Nature
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> TDSCategoryID
        {
            get { return _tDSCategoryID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_tDSCategoryID != value)
                    {
                        if (TDSCategory != null && TDSCategory.TDSCategoryID != value)
                        {
                            TDSCategory = null;
                        }
                        _tDSCategoryID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _tDSCategoryID;
        [Required]
        public virtual bool TDSCompany
        {
            get { return _tDSCompany; }
            set { _tDSCompany = value; }
        }
        private bool _tDSCompany = false;
    	
        [StringLength(10, ErrorMessage="Number of  characters cannot be more than 10")]
        public virtual string PAN
        {
            get;
            set;
        }
        public virtual string Address
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string City
        {
            get;
            set;
        }
        public virtual Nullable<decimal> PIN
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> StateID
        {
            get { return _stateID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateID != value)
                    {
                        if (State != null && State.StateID != value)
                        {
                            State = null;
                        }
                        _stateID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _stateID;
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        public virtual string CountryCode
        {
            get { return _countryCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryCode != value)
                    {
                        if (Country != null && Country.CountryCode != value)
                        {
                            Country = null;
                        }
                        _countryCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _countryCode = "091";
        public virtual Nullable<bool> Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private Nullable<bool> _active = true;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual AcSubCategory AcSubCategory
        {
            get { return _acSubCategory; }
            set
            {
                if (!ReferenceEquals(_acSubCategory, value))
                {
                    var previousValue = _acSubCategory;
                    _acSubCategory = value;
                    FixupAcSubCategory(previousValue);
                }
            }
        }
        private AcSubCategory _acSubCategory;
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual TDSCategory TDSCategory
        {
            get { return _tDSCategory; }
            set
            {
                if (!ReferenceEquals(_tDSCategory, value))
                {
                    var previousValue = _tDSCategory;
                    _tDSCategory = value;
                    FixupTDSCategory(previousValue);
                }
            }
        }
        private TDSCategory _tDSCategory;
    
        public virtual ICollection<AcTransactionAc> AcTransactionAcs
        {
            get
            {
                if (_acTransactionAcs == null)
                {
                    var newCollection = new FixupCollection<AcTransactionAc>();
                    newCollection.CollectionChanged += FixupAcTransactionAcs;
                    _acTransactionAcs = newCollection;
                }
                return _acTransactionAcs;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionAcs, value))
                {
                    var previousValue = _acTransactionAcs as FixupCollection<AcTransactionAc>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionAcs;
                    }
                    _acTransactionAcs = value;
                    var newValue = value as FixupCollection<AcTransactionAc>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionAcs;
                    }
                }
            }
        }
        private ICollection<AcTransactionAc> _acTransactionAcs;
    
        public virtual ICollection<AcTransaction> AcTransactions
        {
            get
            {
                if (_acTransactions == null)
                {
                    var newCollection = new FixupCollection<AcTransaction>();
                    newCollection.CollectionChanged += FixupAcTransactions;
                    _acTransactions = newCollection;
                }
                return _acTransactions;
            }
            set
            {
                if (!ReferenceEquals(_acTransactions, value))
                {
                    var previousValue = _acTransactions as FixupCollection<AcTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactions;
                    }
                    _acTransactions = value;
                    var newValue = value as FixupCollection<AcTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactions;
                    }
                }
            }
        }
        private ICollection<AcTransaction> _acTransactions;
    
        public virtual ICollection<AcTransactionTDS> AcTransactionTDS_Ac
        {
            get
            {
                if (_acTransactionTDS_Ac == null)
                {
                    var newCollection = new FixupCollection<AcTransactionTDS>();
                    newCollection.CollectionChanged += FixupAcTransactionTDS_Ac;
                    _acTransactionTDS_Ac = newCollection;
                }
                return _acTransactionTDS_Ac;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionTDS_Ac, value))
                {
                    var previousValue = _acTransactionTDS_Ac as FixupCollection<AcTransactionTDS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionTDS_Ac;
                    }
                    _acTransactionTDS_Ac = value;
                    var newValue = value as FixupCollection<AcTransactionTDS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionTDS_Ac;
                    }
                }
            }
        }
        private ICollection<AcTransactionTDS> _acTransactionTDS_Ac;
    
        public virtual ICollection<AcTransactionTDS> AcTransactionTDS_TDSAc
        {
            get
            {
                if (_acTransactionTDS_TDSAc == null)
                {
                    var newCollection = new FixupCollection<AcTransactionTDS>();
                    newCollection.CollectionChanged += FixupAcTransactionTDS_TDSAc;
                    _acTransactionTDS_TDSAc = newCollection;
                }
                return _acTransactionTDS_TDSAc;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionTDS_TDSAc, value))
                {
                    var previousValue = _acTransactionTDS_TDSAc as FixupCollection<AcTransactionTDS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionTDS_TDSAc;
                    }
                    _acTransactionTDS_TDSAc = value;
                    var newValue = value as FixupCollection<AcTransactionTDS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionTDS_TDSAc;
                    }
                }
            }
        }
        private ICollection<AcTransactionTDS> _acTransactionTDS_TDSAc;
    
        public virtual ICollection<Society> Societies_MemberAc
        {
            get
            {
                if (_societies_MemberAc == null)
                {
                    var newCollection = new FixupCollection<Society>();
                    newCollection.CollectionChanged += FixupSocieties_MemberAc;
                    _societies_MemberAc = newCollection;
                }
                return _societies_MemberAc;
            }
            set
            {
                if (!ReferenceEquals(_societies_MemberAc, value))
                {
                    var previousValue = _societies_MemberAc as FixupCollection<Society>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocieties_MemberAc;
                    }
                    _societies_MemberAc = value;
                    var newValue = value as FixupCollection<Society>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocieties_MemberAc;
                    }
                }
            }
        }
        private ICollection<Society> _societies_MemberAc;
    
        public virtual ICollection<Society> Societies_TrfFeeAc
        {
            get
            {
                if (_societies_TrfFeeAc == null)
                {
                    var newCollection = new FixupCollection<Society>();
                    newCollection.CollectionChanged += FixupSocieties_TrfFeeAc;
                    _societies_TrfFeeAc = newCollection;
                }
                return _societies_TrfFeeAc;
            }
            set
            {
                if (!ReferenceEquals(_societies_TrfFeeAc, value))
                {
                    var previousValue = _societies_TrfFeeAc as FixupCollection<Society>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocieties_TrfFeeAc;
                    }
                    _societies_TrfFeeAc = value;
                    var newValue = value as FixupCollection<Society>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocieties_TrfFeeAc;
                    }
                }
            }
        }
        private ICollection<Society> _societies_TrfFeeAc;
    
        public virtual ICollection<SocietyChargeHead> SocietyChargeHeads
        {
            get
            {
                if (_societyChargeHeads == null)
                {
                    var newCollection = new FixupCollection<SocietyChargeHead>();
                    newCollection.CollectionChanged += FixupSocietyChargeHeads;
                    _societyChargeHeads = newCollection;
                }
                return _societyChargeHeads;
            }
            set
            {
                if (!ReferenceEquals(_societyChargeHeads, value))
                {
                    var previousValue = _societyChargeHeads as FixupCollection<SocietyChargeHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyChargeHeads;
                    }
                    _societyChargeHeads = value;
                    var newValue = value as FixupCollection<SocietyChargeHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyChargeHeads;
                    }
                }
            }
        }
        private ICollection<SocietyChargeHead> _societyChargeHeads;
    
        public virtual ICollection<SocietyPayMode> SocietyPayModes
        {
            get
            {
                if (_societyPayModes == null)
                {
                    var newCollection = new FixupCollection<SocietyPayMode>();
                    newCollection.CollectionChanged += FixupSocietyPayModes;
                    _societyPayModes = newCollection;
                }
                return _societyPayModes;
            }
            set
            {
                if (!ReferenceEquals(_societyPayModes, value))
                {
                    var previousValue = _societyPayModes as FixupCollection<SocietyPayMode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyPayModes;
                    }
                    _societyPayModes = value;
                    var newValue = value as FixupCollection<SocietyPayMode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyPayModes;
                    }
                }
            }
        }
        private ICollection<SocietyPayMode> _societyPayModes;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAcSubCategory(AcSubCategory previousValue)
        {
            if (previousValue != null && previousValue.AcHeads.Contains(this))
            {
                previousValue.AcHeads.Remove(this);
            }
    
            if (AcSubCategory != null)
            {
                if (!AcSubCategory.AcHeads.Contains(this))
                {
                    AcSubCategory.AcHeads.Add(this);
                }
                if (SocietyID != AcSubCategory.SocietyID)
                {
                    SocietyID = AcSubCategory.SocietyID;
                }
                if (SubCategoryID != AcSubCategory.SubCategoryID)
                {
                    SubCategoryID = AcSubCategory.SubCategoryID;
                }
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.AcHeads.Contains(this))
            {
                previousValue.AcHeads.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.AcHeads.Contains(this))
                {
                    Country.AcHeads.Add(this);
                }
                if (CountryCode != Country.CountryCode)
                {
                    CountryCode = Country.CountryCode;
                }
            }
            else if (!_settingFK)
            {
                CountryCode = null;
            }
        }
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.AcHeads.Contains(this))
            {
                previousValue.AcHeads.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.AcHeads.Contains(this))
                {
                    Society.AcHeads.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.AcHeads.Contains(this))
            {
                previousValue.AcHeads.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.AcHeads.Contains(this))
                {
                    State.AcHeads.Add(this);
                }
                if (StateID != State.StateID)
                {
                    StateID = State.StateID;
                }
            }
            else if (!_settingFK)
            {
                StateID = null;
            }
        }
    
        private void FixupTDSCategory(TDSCategory previousValue)
        {
            if (previousValue != null && previousValue.AcHeads.Contains(this))
            {
                previousValue.AcHeads.Remove(this);
            }
    
            if (TDSCategory != null)
            {
                if (!TDSCategory.AcHeads.Contains(this))
                {
                    TDSCategory.AcHeads.Add(this);
                }
                if (TDSCategoryID != TDSCategory.TDSCategoryID)
                {
                    TDSCategoryID = TDSCategory.TDSCategoryID;
                }
            }
            else if (!_settingFK)
            {
                TDSCategoryID = null;
            }
        }
    
        private void FixupAcTransactionAcs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionAc item in e.NewItems)
                {
                    item.AcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionAc item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead, this))
                    {
                        item.AcHead = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransaction item in e.NewItems)
                {
                    item.AcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead, this))
                    {
                        item.AcHead = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionTDS_Ac(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionTDS item in e.NewItems)
                {
                    item.AcHead_Ac = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionTDS item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead_Ac, this))
                    {
                        item.AcHead_Ac = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionTDS_TDSAc(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionTDS item in e.NewItems)
                {
                    item.AcHead_TDSAc = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionTDS item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead_TDSAc, this))
                    {
                        item.AcHead_TDSAc = null;
                    }
                }
            }
        }
    
        private void FixupSocieties_MemberAc(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Society item in e.NewItems)
                {
                    item.AcHead_MemberAc = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Society item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead_MemberAc, this))
                    {
                        item.AcHead_MemberAc = null;
                    }
                }
            }
        }
    
        private void FixupSocieties_TrfFeeAc(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Society item in e.NewItems)
                {
                    item.AcHead_TrfFeeAc = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Society item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead_TrfFeeAc, this))
                    {
                        item.AcHead_TrfFeeAc = null;
                    }
                }
            }
        }
    
        private void FixupSocietyChargeHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyChargeHead item in e.NewItems)
                {
                    item.AcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyChargeHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead, this))
                    {
                        item.AcHead = null;
                    }
                }
            }
        }
    
        private void FixupSocietyPayModes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyPayMode item in e.NewItems)
                {
                    item.AcHead = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyPayMode item in e.OldItems)
                {
                    if (ReferenceEquals(item.AcHead, this))
                    {
                        item.AcHead = null;
                    }
                }
            }
        }

        #endregion

    }
}
