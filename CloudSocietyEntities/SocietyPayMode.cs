//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class SocietyPayMode
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                if (_societyID != value)
                {
                    if (AcHead != null && AcHead.SocietyID != value)
                    {
                        AcHead = null;
                    }
                    if (Society != null && Society.SocietyID != value)
                    {
                        Society = null;
                    }
                    _societyID = value;
                }
            }
        }
        private System.Guid _societyID;
    	
        [StringLength(2, ErrorMessage="Number of  characters cannot be more than 2")]
        [Required]
        public virtual string PayModeCode
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        [Required]
        public virtual string PayMode
        {
            get;
            set;
        }
        [Required]
        public virtual bool AskDetails
        {
            get;
            set;
        }
        [Required]
        public virtual bool Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private bool _active = true;
        [Required]
        public virtual System.Guid AcHeadID
        {
            get { return _acHeadID; }
            set
            {
                if (_acHeadID != value)
                {
                    if (AcHead != null && AcHead.AcHeadID != value)
                    {
                        AcHead = null;
                    }
                    _acHeadID = value;
                }
            }
        }
        private System.Guid _acHeadID;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual AcHead AcHead
        {
            get { return _acHead; }
            set
            {
                if (!ReferenceEquals(_acHead, value))
                {
                    var previousValue = _acHead;
                    _acHead = value;
                    FixupAcHead(previousValue);
                }
            }
        }
        private AcHead _acHead;
    
        public virtual ICollection<AcTransaction> AcTransactions
        {
            get
            {
                if (_acTransactions == null)
                {
                    var newCollection = new FixupCollection<AcTransaction>();
                    newCollection.CollectionChanged += FixupAcTransactions;
                    _acTransactions = newCollection;
                }
                return _acTransactions;
            }
            set
            {
                if (!ReferenceEquals(_acTransactions, value))
                {
                    var previousValue = _acTransactions as FixupCollection<AcTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactions;
                    }
                    _acTransactions = value;
                    var newValue = value as FixupCollection<AcTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactions;
                    }
                }
            }
        }
        private ICollection<AcTransaction> _acTransactions;
    
        public virtual Society Society
        {
            get { return _society; }
            set
            {
                if (!ReferenceEquals(_society, value))
                {
                    var previousValue = _society;
                    _society = value;
                    FixupSociety(previousValue);
                }
            }
        }
        private Society _society;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;

        #endregion

        #region Association Fixup
    
        private void FixupAcHead(AcHead previousValue)
        {
            if (previousValue != null && previousValue.SocietyPayModes.Contains(this))
            {
                previousValue.SocietyPayModes.Remove(this);
            }
    
            if (AcHead != null)
            {
                if (!AcHead.SocietyPayModes.Contains(this))
                {
                    AcHead.SocietyPayModes.Add(this);
                }
                if (SocietyID != AcHead.SocietyID)
                {
                    SocietyID = AcHead.SocietyID;
                }
                if (AcHeadID != AcHead.AcHeadID)
                {
                    AcHeadID = AcHead.AcHeadID;
                }
            }
        }
    
        private void FixupSociety(Society previousValue)
        {
            if (previousValue != null && previousValue.SocietyPayModes.Contains(this))
            {
                previousValue.SocietyPayModes.Remove(this);
            }
    
            if (Society != null)
            {
                if (!Society.SocietyPayModes.Contains(this))
                {
                    Society.SocietyPayModes.Add(this);
                }
                if (SocietyID != Society.SocietyID)
                {
                    SocietyID = Society.SocietyID;
                }
            }
        }
    
        private void FixupAcTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransaction item in e.NewItems)
                {
                    item.SocietyPayMode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyPayMode, this))
                    {
                        item.SocietyPayMode = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.SocietyPayMode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyPayMode, this))
                    {
                        item.SocietyPayMode = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.SocietyPayMode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.SocietyPayMode, this))
                    {
                        item.SocietyPayMode = null;
                    }
                }
            }
        }

        #endregion

    }
}
