//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Tax
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid TaxID
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Head
        {
            get;
            set;
        }
        [Required]
        public virtual decimal TaxRate
        {
            get;
            set;
        }
        [Required]
        public virtual decimal Surcharge
        {
            get { return _surcharge; }
            set { _surcharge = value; }
        }
        private decimal _surcharge = 0m;
        [Required]
        public virtual decimal Cess
        {
            get { return _cess; }
            set { _cess = value; }
        }
        private decimal _cess = 2m;
        [Required]
        public virtual decimal HiEduCess
        {
            get { return _hiEduCess; }
            set { _hiEduCess = value; }
        }
        private decimal _hiEduCess = 1m;
        [Required]
        public virtual byte RoundToPs
        {
            get { return _roundToPs; }
            set { _roundToPs = value; }
        }
        private byte _roundToPs = 100;
        public virtual Nullable<System.Guid> AcHeadID
        {
            get { return _acHeadID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_acHeadID != value)
                    {
                        if (StandardAcHead != null && StandardAcHead.AcHeadID != value)
                        {
                            StandardAcHead = null;
                        }
                        _acHeadID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _acHeadID;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
        public virtual Nullable<decimal> TaxPerc
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<SocietyBillSeries> SocietyBillSeries
        {
            get
            {
                if (_societyBillSeries == null)
                {
                    var newCollection = new FixupCollection<SocietyBillSeries>();
                    newCollection.CollectionChanged += FixupSocietyBillSeries;
                    _societyBillSeries = newCollection;
                }
                return _societyBillSeries;
            }
            set
            {
                if (!ReferenceEquals(_societyBillSeries, value))
                {
                    var previousValue = _societyBillSeries as FixupCollection<SocietyBillSeries>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBillSeries;
                    }
                    _societyBillSeries = value;
                    var newValue = value as FixupCollection<SocietyBillSeries>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBillSeries;
                    }
                }
            }
        }
        private ICollection<SocietyBillSeries> _societyBillSeries;
    
        public virtual StandardAcHead StandardAcHead
        {
            get { return _standardAcHead; }
            set
            {
                if (!ReferenceEquals(_standardAcHead, value))
                {
                    var previousValue = _standardAcHead;
                    _standardAcHead = value;
                    FixupStandardAcHead(previousValue);
                }
            }
        }
        private StandardAcHead _standardAcHead;
    
        public virtual ICollection<AppInfo> AppInfoes
        {
            get
            {
                if (_appInfoes == null)
                {
                    var newCollection = new FixupCollection<AppInfo>();
                    newCollection.CollectionChanged += FixupAppInfoes;
                    _appInfoes = newCollection;
                }
                return _appInfoes;
            }
            set
            {
                if (!ReferenceEquals(_appInfoes, value))
                {
                    var previousValue = _appInfoes as FixupCollection<AppInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAppInfoes;
                    }
                    _appInfoes = value;
                    var newValue = value as FixupCollection<AppInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAppInfoes;
                    }
                }
            }
        }
        private ICollection<AppInfo> _appInfoes;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupStandardAcHead(StandardAcHead previousValue)
        {
            if (previousValue != null && previousValue.Taxes.Contains(this))
            {
                previousValue.Taxes.Remove(this);
            }
    
            if (StandardAcHead != null)
            {
                if (!StandardAcHead.Taxes.Contains(this))
                {
                    StandardAcHead.Taxes.Add(this);
                }
                if (AcHeadID != StandardAcHead.AcHeadID)
                {
                    AcHeadID = StandardAcHead.AcHeadID;
                }
            }
            else if (!_settingFK)
            {
                AcHeadID = null;
            }
        }
    
        private void FixupSocietyBillSeries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBillSeries item in e.NewItems)
                {
                    item.Tax = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBillSeries item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tax, this))
                    {
                        item.Tax = null;
                    }
                }
            }
        }
    
        private void FixupAppInfoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AppInfo item in e.NewItems)
                {
                    item.Tax = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AppInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tax, this))
                    {
                        item.Tax = null;
                    }
                }
            }
        }

        #endregion

    }
}
