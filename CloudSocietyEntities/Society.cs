//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace CloudSocietyEntities
{
    public partial class Society
    {
        #region Primitive Properties
        [Required]
        public virtual System.Guid SocietyID
        {
            get { return _societyID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_societyID != value)
                    {
                        if (AcHead_MemberAc != null && AcHead_MemberAc.SocietyID != value)
                        {
                            var previousValue = _acHead_MemberAc;
                            _acHead_MemberAc = null;
                            FixupAcHead_MemberAc(previousValue, skipKeys: true);
                        }
                        if (AcHead_TrfFeeAc != null && AcHead_TrfFeeAc.SocietyID != value)
                        {
                            var previousValue = _acHead_TrfFeeAc;
                            _acHead_TrfFeeAc = null;
                            FixupAcHead_TrfFeeAc(previousValue, skipKeys: true);
                        }
                        _societyID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _societyID;
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        [Required]
        public virtual string Name
        {
            get;
            set;
        }
    	
        [StringLength(5, ErrorMessage="Number of  characters cannot be more than 5")]
        public virtual string Abbreviation
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string RegistrationNo
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> RegistrationDate
        {
            get;
            set;
        }
        public virtual string Address
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string City
        {
            get;
            set;
        }
        public virtual Nullable<decimal> PIN
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> StateID
        {
            get { return _stateID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_stateID != value)
                    {
                        if (State != null && State.StateID != value)
                        {
                            State = null;
                        }
                        _stateID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _stateID;
    	
        [StringLength(3, ErrorMessage="Number of  characters cannot be more than 3")]
        public virtual string CountryCode
        {
            get { return _countryCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryCode != value)
                    {
                        if (Country != null && Country.CountryCode != value)
                        {
                            Country = null;
                        }
                        _countryCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private string _countryCode = "091";
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string Builder
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string Architect
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string Signatory
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string PAN
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string TAN
        {
            get;
            set;
        }
        public virtual Nullable<int> Capital
        {
            get;
            set;
        }
        [Required]
        public virtual short uNoOfMembers
        {
            get;
            set;
        }
        [Required]
        public virtual System.Guid UOMID
        {
            get { return _uOMID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_uOMID != value)
                    {
                        if (UOM != null && UOM.UOMID != value)
                        {
                            UOM = null;
                        }
                        _uOMID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _uOMID;
        [Required]
        public virtual bool AutoTrigger
        {
            get { return _autoTrigger; }
            set { _autoTrigger = value; }
        }
        private bool _autoTrigger = false;
        public virtual Nullable<int> ConstructionCost
        {
            get;
            set;
        }
    	
        [StringLength(1, ErrorMessage="Number of  characters cannot be more than 1")]
        [Required]
        public virtual string AccountPosting
        {
            get { return _accountPosting; }
            set { _accountPosting = value; }
        }
        private string _accountPosting = "S";
        public virtual Nullable<System.Guid> MemberAcHeadID
        {
            get { return _memberAcHeadID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_memberAcHeadID != value)
                    {
                        if (AcHead_MemberAc != null && AcHead_MemberAc.AcHeadID != value)
                        {
                            var previousValue = _acHead_MemberAc;
                            _acHead_MemberAc = null;
                            FixupAcHead_MemberAc(previousValue, skipKeys: true);
                        }
                        _memberAcHeadID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _memberAcHeadID;
        public virtual Nullable<System.Guid> TransferFeeAcHeadID
        {
            get { return _transferFeeAcHeadID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_transferFeeAcHeadID != value)
                    {
                        if (AcHead_TrfFeeAc != null && AcHead_TrfFeeAc.AcHeadID != value)
                        {
                            var previousValue = _acHead_TrfFeeAc;
                            _acHead_TrfFeeAc = null;
                            FixupAcHead_TrfFeeAc(previousValue, skipKeys: true);
                        }
                        _transferFeeAcHeadID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _transferFeeAcHeadID;
        public virtual Nullable<System.DateTime> uMinDate
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> uMaxDate
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> SubscriberID
        {
            get { return _subscriberID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_subscriberID != value)
                    {
                        if (Subscriber != null && Subscriber.SubscriberID != value)
                        {
                            Subscriber = null;
                        }
                        _subscriberID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _subscriberID;
        [Required]
        public virtual System.Guid CreatedByID
        {
            get;
            set;
        }
        [Required]
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
        public virtual Nullable<System.Guid> UpdatedByID
        {
            get;
            set;
        }
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
        [Required]
        public virtual bool Active
        {
            get { return _active; }
            set { _active = value; }
        }
        private bool _active = false;
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string ContactPerson
        {
            get;
            set;
        }
    	
        [StringLength(50, ErrorMessage="Number of  characters cannot be more than 50")]
        public virtual string Phone
        {
            get;
            set;
        }
    	
        [StringLength(30, ErrorMessage="Number of  characters cannot be more than 30")]
        public virtual string Mobile
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string TaxRegistrationNo
        {
            get;
            set;
        }
        [Required]
        public virtual bool SMS
        {
            get;
            set;
        }
    	
        [StringLength(100, ErrorMessage="Number of  characters cannot be more than 100")]
        public virtual string EMailId
        {
            get;
            set;
        }
        [Required]
        public virtual bool ShowPaymentLink
        {
            get;
            set;
        }
    	
        [StringLength(250, ErrorMessage="Number of  characters cannot be more than 250")]
        public virtual string PaymentGatewayLink
        {
            get;
            set;
        }
        [Required]
        public virtual int TransDelayHour
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<AcHead> AcHeads
        {
            get
            {
                if (_acHeads == null)
                {
                    var newCollection = new FixupCollection<AcHead>();
                    newCollection.CollectionChanged += FixupAcHeads;
                    _acHeads = newCollection;
                }
                return _acHeads;
            }
            set
            {
                if (!ReferenceEquals(_acHeads, value))
                {
                    var previousValue = _acHeads as FixupCollection<AcHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcHeads;
                    }
                    _acHeads = value;
                    var newValue = value as FixupCollection<AcHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcHeads;
                    }
                }
            }
        }
        private ICollection<AcHead> _acHeads;
    
        public virtual AcHead AcHead_MemberAc
        {
            get { return _acHead_MemberAc; }
            set
            {
                if (!ReferenceEquals(_acHead_MemberAc, value))
                {
                    var previousValue = _acHead_MemberAc;
                    _acHead_MemberAc = value;
                    FixupAcHead_MemberAc(previousValue);
                }
            }
        }
        private AcHead _acHead_MemberAc;
    
        public virtual AcHead AcHead_TrfFeeAc
        {
            get { return _acHead_TrfFeeAc; }
            set
            {
                if (!ReferenceEquals(_acHead_TrfFeeAc, value))
                {
                    var previousValue = _acHead_TrfFeeAc;
                    _acHead_TrfFeeAc = value;
                    FixupAcHead_TrfFeeAc(previousValue);
                }
            }
        }
        private AcHead _acHead_TrfFeeAc;
    
        public virtual ICollection<AcTransactionAc> AcTransactionAcs
        {
            get
            {
                if (_acTransactionAcs == null)
                {
                    var newCollection = new FixupCollection<AcTransactionAc>();
                    newCollection.CollectionChanged += FixupAcTransactionAcs;
                    _acTransactionAcs = newCollection;
                }
                return _acTransactionAcs;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionAcs, value))
                {
                    var previousValue = _acTransactionAcs as FixupCollection<AcTransactionAc>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionAcs;
                    }
                    _acTransactionAcs = value;
                    var newValue = value as FixupCollection<AcTransactionAc>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionAcs;
                    }
                }
            }
        }
        private ICollection<AcTransactionAc> _acTransactionAcs;
    
        public virtual ICollection<AcTransaction> AcTransactions
        {
            get
            {
                if (_acTransactions == null)
                {
                    var newCollection = new FixupCollection<AcTransaction>();
                    newCollection.CollectionChanged += FixupAcTransactions;
                    _acTransactions = newCollection;
                }
                return _acTransactions;
            }
            set
            {
                if (!ReferenceEquals(_acTransactions, value))
                {
                    var previousValue = _acTransactions as FixupCollection<AcTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactions;
                    }
                    _acTransactions = value;
                    var newValue = value as FixupCollection<AcTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactions;
                    }
                }
            }
        }
        private ICollection<AcTransaction> _acTransactions;
    
        public virtual ICollection<AcTransactionTDS> AcTransactionTDS
        {
            get
            {
                if (_acTransactionTDS == null)
                {
                    var newCollection = new FixupCollection<AcTransactionTDS>();
                    newCollection.CollectionChanged += FixupAcTransactionTDS;
                    _acTransactionTDS = newCollection;
                }
                return _acTransactionTDS;
            }
            set
            {
                if (!ReferenceEquals(_acTransactionTDS, value))
                {
                    var previousValue = _acTransactionTDS as FixupCollection<AcTransactionTDS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcTransactionTDS;
                    }
                    _acTransactionTDS = value;
                    var newValue = value as FixupCollection<AcTransactionTDS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcTransactionTDS;
                    }
                }
            }
        }
        private ICollection<AcTransactionTDS> _acTransactionTDS;
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual Subscriber Subscriber
        {
            get { return _subscriber; }
            set
            {
                if (!ReferenceEquals(_subscriber, value))
                {
                    var previousValue = _subscriber;
                    _subscriber = value;
                    FixupSubscriber(previousValue);
                }
            }
        }
        private Subscriber _subscriber;
    
        public virtual UOM UOM
        {
            get { return _uOM; }
            set
            {
                if (!ReferenceEquals(_uOM, value))
                {
                    var previousValue = _uOM;
                    _uOM = value;
                    FixupUOM(previousValue);
                }
            }
        }
        private UOM _uOM;
    
        public virtual ICollection<SocietyBill> SocietyBills
        {
            get
            {
                if (_societyBills == null)
                {
                    var newCollection = new FixupCollection<SocietyBill>();
                    newCollection.CollectionChanged += FixupSocietyBills;
                    _societyBills = newCollection;
                }
                return _societyBills;
            }
            set
            {
                if (!ReferenceEquals(_societyBills, value))
                {
                    var previousValue = _societyBills as FixupCollection<SocietyBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBills;
                    }
                    _societyBills = value;
                    var newValue = value as FixupCollection<SocietyBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBills;
                    }
                }
            }
        }
        private ICollection<SocietyBill> _societyBills;
    
        public virtual ICollection<SocietyBillSeries> SocietyBillSeries
        {
            get
            {
                if (_societyBillSeries == null)
                {
                    var newCollection = new FixupCollection<SocietyBillSeries>();
                    newCollection.CollectionChanged += FixupSocietyBillSeries;
                    _societyBillSeries = newCollection;
                }
                return _societyBillSeries;
            }
            set
            {
                if (!ReferenceEquals(_societyBillSeries, value))
                {
                    var previousValue = _societyBillSeries as FixupCollection<SocietyBillSeries>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBillSeries;
                    }
                    _societyBillSeries = value;
                    var newValue = value as FixupCollection<SocietyBillSeries>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBillSeries;
                    }
                }
            }
        }
        private ICollection<SocietyBillSeries> _societyBillSeries;
    
        public virtual ICollection<SocietyBuilding> SocietyBuildings
        {
            get
            {
                if (_societyBuildings == null)
                {
                    var newCollection = new FixupCollection<SocietyBuilding>();
                    newCollection.CollectionChanged += FixupSocietyBuildings;
                    _societyBuildings = newCollection;
                }
                return _societyBuildings;
            }
            set
            {
                if (!ReferenceEquals(_societyBuildings, value))
                {
                    var previousValue = _societyBuildings as FixupCollection<SocietyBuilding>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyBuildings;
                    }
                    _societyBuildings = value;
                    var newValue = value as FixupCollection<SocietyBuilding>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyBuildings;
                    }
                }
            }
        }
        private ICollection<SocietyBuilding> _societyBuildings;
    
        public virtual ICollection<SocietyChargeHead> SocietyChargeHeads
        {
            get
            {
                if (_societyChargeHeads == null)
                {
                    var newCollection = new FixupCollection<SocietyChargeHead>();
                    newCollection.CollectionChanged += FixupSocietyChargeHeads;
                    _societyChargeHeads = newCollection;
                }
                return _societyChargeHeads;
            }
            set
            {
                if (!ReferenceEquals(_societyChargeHeads, value))
                {
                    var previousValue = _societyChargeHeads as FixupCollection<SocietyChargeHead>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyChargeHeads;
                    }
                    _societyChargeHeads = value;
                    var newValue = value as FixupCollection<SocietyChargeHead>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyChargeHeads;
                    }
                }
            }
        }
        private ICollection<SocietyChargeHead> _societyChargeHeads;
    
        public virtual ICollection<SocietyInvestment> SocietyInvestments
        {
            get
            {
                if (_societyInvestments == null)
                {
                    var newCollection = new FixupCollection<SocietyInvestment>();
                    newCollection.CollectionChanged += FixupSocietyInvestments;
                    _societyInvestments = newCollection;
                }
                return _societyInvestments;
            }
            set
            {
                if (!ReferenceEquals(_societyInvestments, value))
                {
                    var previousValue = _societyInvestments as FixupCollection<SocietyInvestment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyInvestments;
                    }
                    _societyInvestments = value;
                    var newValue = value as FixupCollection<SocietyInvestment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyInvestments;
                    }
                }
            }
        }
        private ICollection<SocietyInvestment> _societyInvestments;
    
        public virtual ICollection<SocietyMember> SocietyMembers
        {
            get
            {
                if (_societyMembers == null)
                {
                    var newCollection = new FixupCollection<SocietyMember>();
                    newCollection.CollectionChanged += FixupSocietyMembers;
                    _societyMembers = newCollection;
                }
                return _societyMembers;
            }
            set
            {
                if (!ReferenceEquals(_societyMembers, value))
                {
                    var previousValue = _societyMembers as FixupCollection<SocietyMember>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyMembers;
                    }
                    _societyMembers = value;
                    var newValue = value as FixupCollection<SocietyMember>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyMembers;
                    }
                }
            }
        }
        private ICollection<SocietyMember> _societyMembers;
    
        public virtual ICollection<SocietyPayMode> SocietyPayModes
        {
            get
            {
                if (_societyPayModes == null)
                {
                    var newCollection = new FixupCollection<SocietyPayMode>();
                    newCollection.CollectionChanged += FixupSocietyPayModes;
                    _societyPayModes = newCollection;
                }
                return _societyPayModes;
            }
            set
            {
                if (!ReferenceEquals(_societyPayModes, value))
                {
                    var previousValue = _societyPayModes as FixupCollection<SocietyPayMode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyPayModes;
                    }
                    _societyPayModes = value;
                    var newValue = value as FixupCollection<SocietyPayMode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyPayModes;
                    }
                }
            }
        }
        private ICollection<SocietyPayMode> _societyPayModes;
    
        public virtual ICollection<SocietyReceipt> SocietyReceipts
        {
            get
            {
                if (_societyReceipts == null)
                {
                    var newCollection = new FixupCollection<SocietyReceipt>();
                    newCollection.CollectionChanged += FixupSocietyReceipts;
                    _societyReceipts = newCollection;
                }
                return _societyReceipts;
            }
            set
            {
                if (!ReferenceEquals(_societyReceipts, value))
                {
                    var previousValue = _societyReceipts as FixupCollection<SocietyReceipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceipts;
                    }
                    _societyReceipts = value;
                    var newValue = value as FixupCollection<SocietyReceipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceipts;
                    }
                }
            }
        }
        private ICollection<SocietyReceipt> _societyReceipts;
    
        public virtual ICollection<SocietySpecialBill> SocietySpecialBills
        {
            get
            {
                if (_societySpecialBills == null)
                {
                    var newCollection = new FixupCollection<SocietySpecialBill>();
                    newCollection.CollectionChanged += FixupSocietySpecialBills;
                    _societySpecialBills = newCollection;
                }
                return _societySpecialBills;
            }
            set
            {
                if (!ReferenceEquals(_societySpecialBills, value))
                {
                    var previousValue = _societySpecialBills as FixupCollection<SocietySpecialBill>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySpecialBills;
                    }
                    _societySpecialBills = value;
                    var newValue = value as FixupCollection<SocietySpecialBill>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySpecialBills;
                    }
                }
            }
        }
        private ICollection<SocietySpecialBill> _societySpecialBills;
    
        public virtual ICollection<SocietySubscription> SocietySubscriptions
        {
            get
            {
                if (_societySubscriptions == null)
                {
                    var newCollection = new FixupCollection<SocietySubscription>();
                    newCollection.CollectionChanged += FixupSocietySubscriptions;
                    _societySubscriptions = newCollection;
                }
                return _societySubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_societySubscriptions, value))
                {
                    var previousValue = _societySubscriptions as FixupCollection<SocietySubscription>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietySubscriptions;
                    }
                    _societySubscriptions = value;
                    var newValue = value as FixupCollection<SocietySubscription>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietySubscriptions;
                    }
                }
            }
        }
        private ICollection<SocietySubscription> _societySubscriptions;
    
        public virtual ICollection<SocietyUser> SocietyUsers
        {
            get
            {
                if (_societyUsers == null)
                {
                    var newCollection = new FixupCollection<SocietyUser>();
                    newCollection.CollectionChanged += FixupSocietyUsers;
                    _societyUsers = newCollection;
                }
                return _societyUsers;
            }
            set
            {
                if (!ReferenceEquals(_societyUsers, value))
                {
                    var previousValue = _societyUsers as FixupCollection<SocietyUser>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyUsers;
                    }
                    _societyUsers = value;
                    var newValue = value as FixupCollection<SocietyUser>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyUsers;
                    }
                }
            }
        }
        private ICollection<SocietyUser> _societyUsers;
    
        public virtual ICollection<Coupon> Coupons
        {
            get
            {
                if (_coupons == null)
                {
                    var newCollection = new FixupCollection<Coupon>();
                    newCollection.CollectionChanged += FixupCoupons;
                    _coupons = newCollection;
                }
                return _coupons;
            }
            set
            {
                if (!ReferenceEquals(_coupons, value))
                {
                    var previousValue = _coupons as FixupCollection<Coupon>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCoupons;
                    }
                    _coupons = value;
                    var newValue = value as FixupCollection<Coupon>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCoupons;
                    }
                }
            }
        }
        private ICollection<Coupon> _coupons;
    
        public virtual ICollection<SubscriptionInvoice> SubscriptionInvoices
        {
            get
            {
                if (_subscriptionInvoices == null)
                {
                    var newCollection = new FixupCollection<SubscriptionInvoice>();
                    newCollection.CollectionChanged += FixupSubscriptionInvoices;
                    _subscriptionInvoices = newCollection;
                }
                return _subscriptionInvoices;
            }
            set
            {
                if (!ReferenceEquals(_subscriptionInvoices, value))
                {
                    var previousValue = _subscriptionInvoices as FixupCollection<SubscriptionInvoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptionInvoices;
                    }
                    _subscriptionInvoices = value;
                    var newValue = value as FixupCollection<SubscriptionInvoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptionInvoices;
                    }
                }
            }
        }
        private ICollection<SubscriptionInvoice> _subscriptionInvoices;
    
        public virtual ICollection<SocietyParking> SocietyParkings
        {
            get
            {
                if (_societyParkings == null)
                {
                    var newCollection = new FixupCollection<SocietyParking>();
                    newCollection.CollectionChanged += FixupSocietyParkings;
                    _societyParkings = newCollection;
                }
                return _societyParkings;
            }
            set
            {
                if (!ReferenceEquals(_societyParkings, value))
                {
                    var previousValue = _societyParkings as FixupCollection<SocietyParking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyParkings;
                    }
                    _societyParkings = value;
                    var newValue = value as FixupCollection<SocietyParking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyParkings;
                    }
                }
            }
        }
        private ICollection<SocietyParking> _societyParkings;
    
        public virtual ICollection<AcCategory> AcCategories
        {
            get
            {
                if (_acCategories == null)
                {
                    var newCollection = new FixupCollection<AcCategory>();
                    newCollection.CollectionChanged += FixupAcCategories;
                    _acCategories = newCollection;
                }
                return _acCategories;
            }
            set
            {
                if (!ReferenceEquals(_acCategories, value))
                {
                    var previousValue = _acCategories as FixupCollection<AcCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcCategories;
                    }
                    _acCategories = value;
                    var newValue = value as FixupCollection<AcCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcCategories;
                    }
                }
            }
        }
        private ICollection<AcCategory> _acCategories;
    
        public virtual ICollection<AcSubCategory> AcSubCategories
        {
            get
            {
                if (_acSubCategories == null)
                {
                    var newCollection = new FixupCollection<AcSubCategory>();
                    newCollection.CollectionChanged += FixupAcSubCategories;
                    _acSubCategories = newCollection;
                }
                return _acSubCategories;
            }
            set
            {
                if (!ReferenceEquals(_acSubCategories, value))
                {
                    var previousValue = _acSubCategories as FixupCollection<AcSubCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAcSubCategories;
                    }
                    _acSubCategories = value;
                    var newValue = value as FixupCollection<AcSubCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAcSubCategories;
                    }
                }
            }
        }
        private ICollection<AcSubCategory> _acSubCategories;
    
        public virtual ICollection<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get
            {
                if (_societyCollectionReversals == null)
                {
                    var newCollection = new FixupCollection<SocietyCollectionReversal>();
                    newCollection.CollectionChanged += FixupSocietyCollectionReversals;
                    _societyCollectionReversals = newCollection;
                }
                return _societyCollectionReversals;
            }
            set
            {
                if (!ReferenceEquals(_societyCollectionReversals, value))
                {
                    var previousValue = _societyCollectionReversals as FixupCollection<SocietyCollectionReversal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCollectionReversals;
                    }
                    _societyCollectionReversals = value;
                    var newValue = value as FixupCollection<SocietyCollectionReversal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCollectionReversals;
                    }
                }
            }
        }
        private ICollection<SocietyCollectionReversal> _societyCollectionReversals;
    
        public virtual ICollection<Communication> Communications
        {
            get
            {
                if (_communications == null)
                {
                    var newCollection = new FixupCollection<Communication>();
                    newCollection.CollectionChanged += FixupCommunications;
                    _communications = newCollection;
                }
                return _communications;
            }
            set
            {
                if (!ReferenceEquals(_communications, value))
                {
                    var previousValue = _communications as FixupCollection<Communication>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommunications;
                    }
                    _communications = value;
                    var newValue = value as FixupCollection<Communication>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommunications;
                    }
                }
            }
        }
        private ICollection<Communication> _communications;
    
        public virtual ICollection<SocietyCommunicationSetting> SocietyCommunicationSettings
        {
            get
            {
                if (_societyCommunicationSettings == null)
                {
                    var newCollection = new FixupCollection<SocietyCommunicationSetting>();
                    newCollection.CollectionChanged += FixupSocietyCommunicationSettings;
                    _societyCommunicationSettings = newCollection;
                }
                return _societyCommunicationSettings;
            }
            set
            {
                if (!ReferenceEquals(_societyCommunicationSettings, value))
                {
                    var previousValue = _societyCommunicationSettings as FixupCollection<SocietyCommunicationSetting>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyCommunicationSettings;
                    }
                    _societyCommunicationSettings = value;
                    var newValue = value as FixupCollection<SocietyCommunicationSetting>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyCommunicationSettings;
                    }
                }
            }
        }
        private ICollection<SocietyCommunicationSetting> _societyCommunicationSettings;
    
        public virtual ICollection<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get
            {
                if (_societyReceiptOnholds == null)
                {
                    var newCollection = new FixupCollection<SocietyReceiptOnhold>();
                    newCollection.CollectionChanged += FixupSocietyReceiptOnholds;
                    _societyReceiptOnholds = newCollection;
                }
                return _societyReceiptOnholds;
            }
            set
            {
                if (!ReferenceEquals(_societyReceiptOnholds, value))
                {
                    var previousValue = _societyReceiptOnholds as FixupCollection<SocietyReceiptOnhold>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocietyReceiptOnholds;
                    }
                    _societyReceiptOnholds = value;
                    var newValue = value as FixupCollection<SocietyReceiptOnhold>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocietyReceiptOnholds;
                    }
                }
            }
        }
        private ICollection<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAcHead_MemberAc(AcHead previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.Societies_MemberAc.Contains(this))
            {
                previousValue.Societies_MemberAc.Remove(this);
            }
    
            if (AcHead_MemberAc != null)
            {
                if (!AcHead_MemberAc.Societies_MemberAc.Contains(this))
                {
                    AcHead_MemberAc.Societies_MemberAc.Add(this);
                }
                if (SocietyID != AcHead_MemberAc.SocietyID)
                {
                    SocietyID = AcHead_MemberAc.SocietyID;
                }
                if (MemberAcHeadID != AcHead_MemberAc.AcHeadID)
                {
                    MemberAcHeadID = AcHead_MemberAc.AcHeadID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                MemberAcHeadID = null;
            }
        }
    
        private void FixupAcHead_TrfFeeAc(AcHead previousValue, bool skipKeys = false)
        {
            if (previousValue != null && previousValue.Societies_TrfFeeAc.Contains(this))
            {
                previousValue.Societies_TrfFeeAc.Remove(this);
            }
    
            if (AcHead_TrfFeeAc != null)
            {
                if (!AcHead_TrfFeeAc.Societies_TrfFeeAc.Contains(this))
                {
                    AcHead_TrfFeeAc.Societies_TrfFeeAc.Add(this);
                }
                if (SocietyID != AcHead_TrfFeeAc.SocietyID)
                {
                    SocietyID = AcHead_TrfFeeAc.SocietyID;
                }
                if (TransferFeeAcHeadID != AcHead_TrfFeeAc.AcHeadID)
                {
                    TransferFeeAcHeadID = AcHead_TrfFeeAc.AcHeadID;
                }
            }
            else if (!_settingFK && !skipKeys)
            {
                TransferFeeAcHeadID = null;
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Societies.Contains(this))
            {
                previousValue.Societies.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Societies.Contains(this))
                {
                    Country.Societies.Add(this);
                }
                if (CountryCode != Country.CountryCode)
                {
                    CountryCode = Country.CountryCode;
                }
            }
            else if (!_settingFK)
            {
                CountryCode = null;
            }
        }
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.Societies.Contains(this))
            {
                previousValue.Societies.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.Societies.Contains(this))
                {
                    State.Societies.Add(this);
                }
                if (StateID != State.StateID)
                {
                    StateID = State.StateID;
                }
            }
            else if (!_settingFK)
            {
                StateID = null;
            }
        }
    
        private void FixupSubscriber(Subscriber previousValue)
        {
            if (previousValue != null && previousValue.Societies.Contains(this))
            {
                previousValue.Societies.Remove(this);
            }
    
            if (Subscriber != null)
            {
                if (!Subscriber.Societies.Contains(this))
                {
                    Subscriber.Societies.Add(this);
                }
                if (SubscriberID != Subscriber.SubscriberID)
                {
                    SubscriberID = Subscriber.SubscriberID;
                }
            }
            else if (!_settingFK)
            {
                SubscriberID = null;
            }
        }
    
        private void FixupUOM(UOM previousValue)
        {
            if (previousValue != null && previousValue.Societies.Contains(this))
            {
                previousValue.Societies.Remove(this);
            }
    
            if (UOM != null)
            {
                if (!UOM.Societies.Contains(this))
                {
                    UOM.Societies.Add(this);
                }
                if (UOMID != UOM.UOMID)
                {
                    UOMID = UOM.UOMID;
                }
            }
        }
    
        private void FixupAcHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcHead item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionAcs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionAc item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionAc item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransaction item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupAcTransactionTDS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcTransactionTDS item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcTransactionTDS item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBill item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBillSeries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBillSeries item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBillSeries item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyBuildings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyBuilding item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyBuilding item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyChargeHeads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyChargeHead item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyChargeHead item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyInvestments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyInvestment item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyInvestment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyMember item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyMember item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyPayModes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyPayMode item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyPayMode item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceipt item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietySpecialBills(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySpecialBill item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySpecialBill item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietySubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietySubscription item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietySubscription item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyUser item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupCoupons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Coupon item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Coupon item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSubscriptionInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubscriptionInvoice item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubscriptionInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyParkings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyParking item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyParking item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupAcCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcCategory item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupAcSubCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AcSubCategory item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AcSubCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCollectionReversals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCollectionReversal item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCollectionReversal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupCommunications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Communication item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Communication item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyCommunicationSettings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyCommunicationSetting item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyCommunicationSetting item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }
    
        private void FixupSocietyReceiptOnholds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.NewItems)
                {
                    item.Society = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocietyReceiptOnhold item in e.OldItems)
                {
                    if (ReferenceEquals(item.Society, this))
                    {
                        item.Society = null;
                    }
                }
            }
        }

        #endregion

    }
}
