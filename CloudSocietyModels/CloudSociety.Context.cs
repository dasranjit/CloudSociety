//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;
using CloudSocietyEntities;

namespace CloudSocietyModels
{
    public partial class CloudSocietyEntities : ObjectContext
    {
        public const string ConnectionString = "name=CloudSocietyEntities";
        public const string ContainerName = "CloudSocietyEntities";
    
        #region Constructors
    
        public CloudSocietyEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CloudSocietyEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CloudSocietyEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<AcCategory> AcCategories
        {
            get { return _acCategories  ?? (_acCategories = CreateObjectSet<AcCategory>("AcCategories")); }
        }
        private ObjectSet<AcCategory> _acCategories;
    
        public ObjectSet<AcHead> AcHeads
        {
            get { return _acHeads  ?? (_acHeads = CreateObjectSet<AcHead>("AcHeads")); }
        }
        private ObjectSet<AcHead> _acHeads;
    
        public ObjectSet<AcSubCategory> AcSubCategories
        {
            get { return _acSubCategories  ?? (_acSubCategories = CreateObjectSet<AcSubCategory>("AcSubCategories")); }
        }
        private ObjectSet<AcSubCategory> _acSubCategories;
    
        public ObjectSet<AcTransactionAc> AcTransactionAcs
        {
            get { return _acTransactionAcs  ?? (_acTransactionAcs = CreateObjectSet<AcTransactionAc>("AcTransactionAcs")); }
        }
        private ObjectSet<AcTransactionAc> _acTransactionAcs;
    
        public ObjectSet<AcTransaction> AcTransactions
        {
            get { return _acTransactions  ?? (_acTransactions = CreateObjectSet<AcTransaction>("AcTransactions")); }
        }
        private ObjectSet<AcTransaction> _acTransactions;
    
        public ObjectSet<AcTransactionTDS> AcTransactionTDSSet
        {
            get { return _acTransactionTDSSet  ?? (_acTransactionTDSSet = CreateObjectSet<AcTransactionTDS>("AcTransactionTDSSet")); }
        }
        private ObjectSet<AcTransactionTDS> _acTransactionTDSSet;
    
        public ObjectSet<AppInfo> AppInfoSet
        {
            get { return _appInfoSet  ?? (_appInfoSet = CreateObjectSet<AppInfo>("AppInfoSet")); }
        }
        private ObjectSet<AppInfo> _appInfoSet;
    
        public ObjectSet<Bank> Banks
        {
            get { return _banks  ?? (_banks = CreateObjectSet<Bank>("Banks")); }
        }
        private ObjectSet<Bank> _banks;
    
        public ObjectSet<Country> Countries
        {
            get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
        }
        private ObjectSet<Country> _countries;
    
        public ObjectSet<Coupon> Coupons
        {
            get { return _coupons  ?? (_coupons = CreateObjectSet<Coupon>("Coupons")); }
        }
        private ObjectSet<Coupon> _coupons;
    
        public ObjectSet<MemberClass> MemberClasses
        {
            get { return _memberClasses  ?? (_memberClasses = CreateObjectSet<MemberClass>("MemberClasses")); }
        }
        private ObjectSet<MemberClass> _memberClasses;
    
        public ObjectSet<Occupation> Occupations
        {
            get { return _occupations  ?? (_occupations = CreateObjectSet<Occupation>("Occupations")); }
        }
        private ObjectSet<Occupation> _occupations;
    
        public ObjectSet<ParkingType> ParkingTypes
        {
            get { return _parkingTypes  ?? (_parkingTypes = CreateObjectSet<ParkingType>("ParkingTypes")); }
        }
        private ObjectSet<ParkingType> _parkingTypes;
    
        public ObjectSet<PayMode> PayModes
        {
            get { return _payModes  ?? (_payModes = CreateObjectSet<PayMode>("PayModes")); }
        }
        private ObjectSet<PayMode> _payModes;
    
        public ObjectSet<Relationship> Relationships
        {
            get { return _relationships  ?? (_relationships = CreateObjectSet<Relationship>("Relationships")); }
        }
        private ObjectSet<Relationship> _relationships;
    
        public ObjectSet<ServiceType> ServiceTypes
        {
            get { return _serviceTypes  ?? (_serviceTypes = CreateObjectSet<ServiceType>("ServiceTypes")); }
        }
        private ObjectSet<ServiceType> _serviceTypes;
    
        public ObjectSet<Society> Societies
        {
            get { return _societies  ?? (_societies = CreateObjectSet<Society>("Societies")); }
        }
        private ObjectSet<Society> _societies;
    
        public ObjectSet<SocietyBillChargeHead> SocietyBillChargeHeads
        {
            get { return _societyBillChargeHeads  ?? (_societyBillChargeHeads = CreateObjectSet<SocietyBillChargeHead>("SocietyBillChargeHeads")); }
        }
        private ObjectSet<SocietyBillChargeHead> _societyBillChargeHeads;
    
        public ObjectSet<SocietyBill> SocietyBills
        {
            get { return _societyBills  ?? (_societyBills = CreateObjectSet<SocietyBill>("SocietyBills")); }
        }
        private ObjectSet<SocietyBill> _societyBills;
    
        public ObjectSet<SocietyBillSeries> SocietyBillSeriesSet
        {
            get { return _societyBillSeriesSet  ?? (_societyBillSeriesSet = CreateObjectSet<SocietyBillSeries>("SocietyBillSeriesSet")); }
        }
        private ObjectSet<SocietyBillSeries> _societyBillSeriesSet;
    
        public ObjectSet<SocietyBuilding> SocietyBuildings
        {
            get { return _societyBuildings  ?? (_societyBuildings = CreateObjectSet<SocietyBuilding>("SocietyBuildings")); }
        }
        private ObjectSet<SocietyBuilding> _societyBuildings;
    
        public ObjectSet<SocietyBuildingUnitChargeHead> SocietyBuildingUnitChargeHeads
        {
            get { return _societyBuildingUnitChargeHeads  ?? (_societyBuildingUnitChargeHeads = CreateObjectSet<SocietyBuildingUnitChargeHead>("SocietyBuildingUnitChargeHeads")); }
        }
        private ObjectSet<SocietyBuildingUnitChargeHead> _societyBuildingUnitChargeHeads;
    
        public ObjectSet<SocietyBuildingUnit> SocietyBuildingUnits
        {
            get { return _societyBuildingUnits  ?? (_societyBuildingUnits = CreateObjectSet<SocietyBuildingUnit>("SocietyBuildingUnits")); }
        }
        private ObjectSet<SocietyBuildingUnit> _societyBuildingUnits;
    
        public ObjectSet<SocietyChargeHead> SocietyChargeHeads
        {
            get { return _societyChargeHeads  ?? (_societyChargeHeads = CreateObjectSet<SocietyChargeHead>("SocietyChargeHeads")); }
        }
        private ObjectSet<SocietyChargeHead> _societyChargeHeads;
    
        public ObjectSet<SocietyInvestment> SocietyInvestments
        {
            get { return _societyInvestments  ?? (_societyInvestments = CreateObjectSet<SocietyInvestment>("SocietyInvestments")); }
        }
        private ObjectSet<SocietyInvestment> _societyInvestments;
    
        public ObjectSet<SocietyMemberJointHolder> SocietyMemberJointHolders
        {
            get { return _societyMemberJointHolders  ?? (_societyMemberJointHolders = CreateObjectSet<SocietyMemberJointHolder>("SocietyMemberJointHolders")); }
        }
        private ObjectSet<SocietyMemberJointHolder> _societyMemberJointHolders;
    
        public ObjectSet<SocietyMemberNominee> SocietyMemberNominees
        {
            get { return _societyMemberNominees  ?? (_societyMemberNominees = CreateObjectSet<SocietyMemberNominee>("SocietyMemberNominees")); }
        }
        private ObjectSet<SocietyMemberNominee> _societyMemberNominees;
    
        public ObjectSet<SocietyMember> SocietyMembers
        {
            get { return _societyMembers  ?? (_societyMembers = CreateObjectSet<SocietyMember>("SocietyMembers")); }
        }
        private ObjectSet<SocietyMember> _societyMembers;
    
        public ObjectSet<SocietyMemberTenant> SocietyMemberTenants
        {
            get { return _societyMemberTenants  ?? (_societyMemberTenants = CreateObjectSet<SocietyMemberTenant>("SocietyMemberTenants")); }
        }
        private ObjectSet<SocietyMemberTenant> _societyMemberTenants;
    
        public ObjectSet<SocietyPayMode> SocietyPayModes
        {
            get { return _societyPayModes  ?? (_societyPayModes = CreateObjectSet<SocietyPayMode>("SocietyPayModes")); }
        }
        private ObjectSet<SocietyPayMode> _societyPayModes;
    
        public ObjectSet<SocietyReceipt> SocietyReceipts
        {
            get { return _societyReceipts  ?? (_societyReceipts = CreateObjectSet<SocietyReceipt>("SocietyReceipts")); }
        }
        private ObjectSet<SocietyReceipt> _societyReceipts;
    
        public ObjectSet<SocietySpecialBillChargeHead> SocietySpecialBillChargeHeads
        {
            get { return _societySpecialBillChargeHeads  ?? (_societySpecialBillChargeHeads = CreateObjectSet<SocietySpecialBillChargeHead>("SocietySpecialBillChargeHeads")); }
        }
        private ObjectSet<SocietySpecialBillChargeHead> _societySpecialBillChargeHeads;
    
        public ObjectSet<SocietySpecialBill> SocietySpecialBills
        {
            get { return _societySpecialBills  ?? (_societySpecialBills = CreateObjectSet<SocietySpecialBill>("SocietySpecialBills")); }
        }
        private ObjectSet<SocietySpecialBill> _societySpecialBills;
    
        public ObjectSet<SocietySpecialBillUnit> SocietySpecialBillUnits
        {
            get { return _societySpecialBillUnits  ?? (_societySpecialBillUnits = CreateObjectSet<SocietySpecialBillUnit>("SocietySpecialBillUnits")); }
        }
        private ObjectSet<SocietySpecialBillUnit> _societySpecialBillUnits;
    
        public ObjectSet<SocietySubscriptionInvoice> SocietySubscriptionInvoices
        {
            get { return _societySubscriptionInvoices  ?? (_societySubscriptionInvoices = CreateObjectSet<SocietySubscriptionInvoice>("SocietySubscriptionInvoices")); }
        }
        private ObjectSet<SocietySubscriptionInvoice> _societySubscriptionInvoices;
    
        public ObjectSet<SocietySubscriptionInvoiceService> SocietySubscriptionInvoiceServices
        {
            get { return _societySubscriptionInvoiceServices  ?? (_societySubscriptionInvoiceServices = CreateObjectSet<SocietySubscriptionInvoiceService>("SocietySubscriptionInvoiceServices")); }
        }
        private ObjectSet<SocietySubscriptionInvoiceService> _societySubscriptionInvoiceServices;
    
        public ObjectSet<SocietySubscription> SocietySubscriptions
        {
            get { return _societySubscriptions  ?? (_societySubscriptions = CreateObjectSet<SocietySubscription>("SocietySubscriptions")); }
        }
        private ObjectSet<SocietySubscription> _societySubscriptions;
    
        public ObjectSet<SocietySubscriptionService> SocietySubscriptionServices
        {
            get { return _societySubscriptionServices  ?? (_societySubscriptionServices = CreateObjectSet<SocietySubscriptionService>("SocietySubscriptionServices")); }
        }
        private ObjectSet<SocietySubscriptionService> _societySubscriptionServices;
    
        public ObjectSet<SocietyUser> SocietyUsers
        {
            get { return _societyUsers  ?? (_societyUsers = CreateObjectSet<SocietyUser>("SocietyUsers")); }
        }
        private ObjectSet<SocietyUser> _societyUsers;
    
        public ObjectSet<StandardAcCategory> StandardAcCategories
        {
            get { return _standardAcCategories  ?? (_standardAcCategories = CreateObjectSet<StandardAcCategory>("StandardAcCategories")); }
        }
        private ObjectSet<StandardAcCategory> _standardAcCategories;
    
        public ObjectSet<StandardAcHead> StandardAcHeads
        {
            get { return _standardAcHeads  ?? (_standardAcHeads = CreateObjectSet<StandardAcHead>("StandardAcHeads")); }
        }
        private ObjectSet<StandardAcHead> _standardAcHeads;
    
        public ObjectSet<StandardAcSubCategory> StandardAcSubCategories
        {
            get { return _standardAcSubCategories  ?? (_standardAcSubCategories = CreateObjectSet<StandardAcSubCategory>("StandardAcSubCategories")); }
        }
        private ObjectSet<StandardAcSubCategory> _standardAcSubCategories;
    
        public ObjectSet<StandardChargeHead> StandardChargeHeads
        {
            get { return _standardChargeHeads  ?? (_standardChargeHeads = CreateObjectSet<StandardChargeHead>("StandardChargeHeads")); }
        }
        private ObjectSet<StandardChargeHead> _standardChargeHeads;
    
        public ObjectSet<State> States
        {
            get { return _states  ?? (_states = CreateObjectSet<State>("States")); }
        }
        private ObjectSet<State> _states;
    
        public ObjectSet<Subscriber> Subscribers
        {
            get { return _subscribers  ?? (_subscribers = CreateObjectSet<Subscriber>("Subscribers")); }
        }
        private ObjectSet<Subscriber> _subscribers;
    
        public ObjectSet<SubscriptionInvoice> SubscriptionInvoices
        {
            get { return _subscriptionInvoices  ?? (_subscriptionInvoices = CreateObjectSet<SubscriptionInvoice>("SubscriptionInvoices")); }
        }
        private ObjectSet<SubscriptionInvoice> _subscriptionInvoices;
    
        public ObjectSet<TariffRate> TariffRates
        {
            get { return _tariffRates  ?? (_tariffRates = CreateObjectSet<TariffRate>("TariffRates")); }
        }
        private ObjectSet<TariffRate> _tariffRates;
    
        public ObjectSet<Tariff> Tariffs
        {
            get { return _tariffs  ?? (_tariffs = CreateObjectSet<Tariff>("Tariffs")); }
        }
        private ObjectSet<Tariff> _tariffs;
    
        public ObjectSet<Tax> Taxes
        {
            get { return _taxes  ?? (_taxes = CreateObjectSet<Tax>("Taxes")); }
        }
        private ObjectSet<Tax> _taxes;
    
        public ObjectSet<TDSCategory> TDSCategories
        {
            get { return _tDSCategories  ?? (_tDSCategories = CreateObjectSet<TDSCategory>("TDSCategories")); }
        }
        private ObjectSet<TDSCategory> _tDSCategories;
    
        public ObjectSet<TDSCategoryRate> TDSCategoryRates
        {
            get { return _tDSCategoryRates  ?? (_tDSCategoryRates = CreateObjectSet<TDSCategoryRate>("TDSCategoryRates")); }
        }
        private ObjectSet<TDSCategoryRate> _tDSCategoryRates;
    
        public ObjectSet<UnitType> UnitTypes
        {
            get { return _unitTypes  ?? (_unitTypes = CreateObjectSet<UnitType>("UnitTypes")); }
        }
        private ObjectSet<UnitType> _unitTypes;
    
        public ObjectSet<UOM> UOMs
        {
            get { return _uOMs  ?? (_uOMs = CreateObjectSet<UOM>("UOMs")); }
        }
        private ObjectSet<UOM> _uOMs;
    
        public ObjectSet<UserDetail> UserDetails
        {
            get { return _userDetails  ?? (_userDetails = CreateObjectSet<UserDetail>("UserDetails")); }
        }
        private ObjectSet<UserDetail> _userDetails;
    
        public ObjectSet<SocietyParking> SocietyParkings
        {
            get { return _societyParkings  ?? (_societyParkings = CreateObjectSet<SocietyParking>("SocietyParkings")); }
        }
        private ObjectSet<SocietyParking> _societyParkings;
    
        public ObjectSet<SocietyParkingTransfer> SocietyParkingTransfers
        {
            get { return _societyParkingTransfers  ?? (_societyParkingTransfers = CreateObjectSet<SocietyParkingTransfer>("SocietyParkingTransfers")); }
        }
        private ObjectSet<SocietyParkingTransfer> _societyParkingTransfers;
    
        public ObjectSet<SocietyBuildingUnitChargeHeadView> SocietyBuildingUnitChargeHeadViews
        {
            get { return _societyBuildingUnitChargeHeadViews  ?? (_societyBuildingUnitChargeHeadViews = CreateObjectSet<SocietyBuildingUnitChargeHeadView>("SocietyBuildingUnitChargeHeadViews")); }
        }
        private ObjectSet<SocietyBuildingUnitChargeHeadView> _societyBuildingUnitChargeHeadViews;
    
        public ObjectSet<SocietyBuildingUnitSubscriptionBalance> SocietyBuildingUnitSubscriptionBalances
        {
            get { return _societyBuildingUnitSubscriptionBalances  ?? (_societyBuildingUnitSubscriptionBalances = CreateObjectSet<SocietyBuildingUnitSubscriptionBalance>("SocietyBuildingUnitSubscriptionBalances")); }
        }
        private ObjectSet<SocietyBuildingUnitSubscriptionBalance> _societyBuildingUnitSubscriptionBalances;
    
        public ObjectSet<SocietyBuildingUnitTransfer> SocietyBuildingUnitTransfers
        {
            get { return _societyBuildingUnitTransfers  ?? (_societyBuildingUnitTransfers = CreateObjectSet<SocietyBuildingUnitTransfer>("SocietyBuildingUnitTransfers")); }
        }
        private ObjectSet<SocietyBuildingUnitTransfer> _societyBuildingUnitTransfers;
    
        public ObjectSet<SocietySpecialBillChargeHeadView> SocietySpecialBillChargeHeadViews
        {
            get { return _societySpecialBillChargeHeadViews  ?? (_societySpecialBillChargeHeadViews = CreateObjectSet<SocietySpecialBillChargeHeadView>("SocietySpecialBillChargeHeadViews")); }
        }
        private ObjectSet<SocietySpecialBillChargeHeadView> _societySpecialBillChargeHeadViews;
    
        public ObjectSet<PasswordQuestion> PasswordQuestions
        {
            get { return _passwordQuestions  ?? (_passwordQuestions = CreateObjectSet<PasswordQuestion>("PasswordQuestions")); }
        }
        private ObjectSet<PasswordQuestion> _passwordQuestions;
    
        public ObjectSet<SocietyCollectionReversal> SocietyCollectionReversals
        {
            get { return _societyCollectionReversals  ?? (_societyCollectionReversals = CreateObjectSet<SocietyCollectionReversal>("SocietyCollectionReversals")); }
        }
        private ObjectSet<SocietyCollectionReversal> _societyCollectionReversals;
    
        public ObjectSet<CommunicationRecipient> CommunicationRecipients
        {
            get { return _communicationRecipients  ?? (_communicationRecipients = CreateObjectSet<CommunicationRecipient>("CommunicationRecipients")); }
        }
        private ObjectSet<CommunicationRecipient> _communicationRecipients;
    
        public ObjectSet<CommunicationReply> CommunicationReplies
        {
            get { return _communicationReplies  ?? (_communicationReplies = CreateObjectSet<CommunicationReply>("CommunicationReplies")); }
        }
        private ObjectSet<CommunicationReply> _communicationReplies;
    
        public ObjectSet<CommunicationType> CommunicationTypes
        {
            get { return _communicationTypes  ?? (_communicationTypes = CreateObjectSet<CommunicationType>("CommunicationTypes")); }
        }
        private ObjectSet<CommunicationType> _communicationTypes;
    
        public ObjectSet<Communication> Communications
        {
            get { return _communications  ?? (_communications = CreateObjectSet<Communication>("Communications")); }
        }
        private ObjectSet<Communication> _communications;
    
        public ObjectSet<SocietyCommunicationSetting> SocietyCommunicationSettings
        {
            get { return _societyCommunicationSettings  ?? (_societyCommunicationSettings = CreateObjectSet<SocietyCommunicationSetting>("SocietyCommunicationSettings")); }
        }
        private ObjectSet<SocietyCommunicationSetting> _societyCommunicationSettings;
    
        public ObjectSet<DocumentType> DocumentTypes
        {
            get { return _documentTypes  ?? (_documentTypes = CreateObjectSet<DocumentType>("DocumentTypes")); }
        }
        private ObjectSet<DocumentType> _documentTypes;
    
        public ObjectSet<SocietyMemberDocument> SocietyMemberDocuments
        {
            get { return _societyMemberDocuments  ?? (_societyMemberDocuments = CreateObjectSet<SocietyMemberDocument>("SocietyMemberDocuments")); }
        }
        private ObjectSet<SocietyMemberDocument> _societyMemberDocuments;
    
        public ObjectSet<SocietyReceiptOnhold> SocietyReceiptOnholds
        {
            get { return _societyReceiptOnholds  ?? (_societyReceiptOnholds = CreateObjectSet<SocietyReceiptOnhold>("SocietyReceiptOnholds")); }
        }
        private ObjectSet<SocietyReceiptOnhold> _societyReceiptOnholds;

        #endregion

        #region Function Imports
        public ObjectResult<SocietySubscriptionWithServices> ListSocietySubscriptionsForInvoicingForCompany()
        {
            return base.ExecuteFunction<SocietySubscriptionWithServices>("ListSocietySubscriptionsForInvoicingForCompany");
        }
        public ObjectResult<SocietySubscriptionWithServices> ListSocietySubscriptionsForInvoicingForSubscriber(Nullable<System.Guid> subscriberID)
        {
    
            ObjectParameter subscriberIDParameter;
    
            if (subscriberID.HasValue)
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", subscriberID);
            }
            else
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietySubscriptionWithServices>("ListSocietySubscriptionsForInvoicingForSubscriber", subscriberIDParameter);
        }
        public ObjectResult<User> ListUsersForRoleAndSubscriberID(string role, Nullable<System.Guid> subscriberID)
        {
    
            ObjectParameter roleParameter;
    
            if (role != null)
            {
                roleParameter = new ObjectParameter("Role", role);
            }
            else
            {
                roleParameter = new ObjectParameter("Role", typeof(string));
            }
    
            ObjectParameter subscriberIDParameter;
    
            if (subscriberID.HasValue)
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", subscriberID);
            }
            else
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<User>("ListUsersForRoleAndSubscriberID", roleParameter, subscriberIDParameter);
        }
        public ObjectResult<SocietySubscriptionWithServices> GetSocietySubscriptionWithServicesInvoiced(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietySubscriptionWithServices>("GetSocietySubscriptionWithServicesInvoiced", societySubscriptionIDParameter);
        }
        public ObjectResult<TariffRateWithActiveStatus> ListTariffRatesWithActiveStatusForSubscription(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<TariffRateWithActiveStatus>("ListTariffRatesWithActiveStatusForSubscription", societySubscriptionIDParameter);
        }
        public ObjectResult<TariffRateWithActiveStatus> ListTariffRatesWithActiveStatusMonthlyForSubscription(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<TariffRateWithActiveStatus>("ListTariffRatesWithActiveStatusMonthlyForSubscription", societySubscriptionIDParameter);
        }
        public ObjectResult<UserWithSocietyAccess> ListUsersWithSocietyAccessForRoleAndSubscriber(string role, Nullable<System.Guid> subscriberID, Nullable<System.Guid> societyID)
        {
    
            ObjectParameter roleParameter;
    
            if (role != null)
            {
                roleParameter = new ObjectParameter("Role", role);
            }
            else
            {
                roleParameter = new ObjectParameter("Role", typeof(string));
            }
    
            ObjectParameter subscriberIDParameter;
    
            if (subscriberID.HasValue)
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", subscriberID);
            }
            else
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", typeof(System.Guid));
            }
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
            return base.ExecuteFunction<UserWithSocietyAccess>("ListUsersWithSocietyAccessForRoleAndSubscriber", roleParameter, subscriberIDParameter, societyIDParameter);
        }
        public ObjectResult<SocietyWithUserAccess> ListSocietiesWithUserAccessBySubscriberID(Nullable<System.Guid> subscriberID, Nullable<System.Guid> userID)
        {
    
            ObjectParameter subscriberIDParameter;
    
            if (subscriberID.HasValue)
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", subscriberID);
            }
            else
            {
                subscriberIDParameter = new ObjectParameter("SubscriberID", typeof(System.Guid));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyWithUserAccess>("ListSocietiesWithUserAccessBySubscriberID", subscriberIDParameter, userIDParameter);
        }
        public ObjectResult<BuildingUnitWithID> ListSocietyBuildingUnitBySocietyID(Nullable<System.Guid> societyID)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
            return base.ExecuteFunction<BuildingUnitWithID>("ListSocietyBuildingUnitBySocietyID", societyIDParameter);
        }
        public ObjectResult<SocietyMember> ListSocietyMembersBySocietyBuildingUnitID(Nullable<System.Guid> societyBuildingUnitID)
        {
    
            ObjectParameter societyBuildingUnitIDParameter;
    
            if (societyBuildingUnitID.HasValue)
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", societyBuildingUnitID);
            }
            else
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyMember>("ListSocietyMembersBySocietyBuildingUnitID", societyBuildingUnitIDParameter);
        }
        public ObjectResult<SocietyBillChargeHeadWithHead> ListSocietyBillChargeHeadsBySocietyBillID(Nullable<System.Guid> societyBillID)
        {
    
            ObjectParameter societyBillIDParameter;
    
            if (societyBillID.HasValue)
            {
                societyBillIDParameter = new ObjectParameter("SocietyBillID", societyBillID);
            }
            else
            {
                societyBillIDParameter = new ObjectParameter("SocietyBillID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyBillChargeHeadWithHead>("ListSocietyBillChargeHeadsBySocietyBillID", societyBillIDParameter);
        }
        public ObjectResult<Nullable<int>> GetSocietyBuildingUnitsCountBySocietySubscriptionID(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("GetSocietyBuildingUnitsCountBySocietySubscriptionID", societySubscriptionIDParameter);
        }
        public ObjectResult<AcBalance> ListAcBalancesBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcBalance>("ListAcBalancesBySocietyID", societyIDParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<Nullable<int>> GetAccountingEnabledCountForPreviousYear(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Nullable<int>>("GetAccountingEnabledCountForPreviousYear", societySubscriptionIDParameter);
        }
        public ObjectResult<AcLedger> ListAcLedgerBySocietyIDAcHeadIds(Nullable<System.Guid> societyID, string acHeadIds, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter acHeadIdsParameter;
    
            if (acHeadIds != null)
            {
                acHeadIdsParameter = new ObjectParameter("AcHeadIds", acHeadIds);
            }
            else
            {
                acHeadIdsParameter = new ObjectParameter("AcHeadIds", typeof(string));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcLedger>("ListAcLedgerBySocietyIDAcHeadIds", societyIDParameter, acHeadIdsParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<SocietyParkingWithMember> ListSocietyParkingsWithMemberBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> asOnDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter asOnDateParameter;
    
            if (asOnDate.HasValue)
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", asOnDate);
            }
            else
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<SocietyParkingWithMember>("ListSocietyParkingsWithMemberBySocietyID", societyIDParameter, asOnDateParameter);
        }
        public ObjectResult<SocietyMember> ListSocietyMembersBySocietyBuildingUnitIDForNoOpeningBalance(Nullable<System.Guid> societyBuildingUnitID)
        {
    
            ObjectParameter societyBuildingUnitIDParameter;
    
            if (societyBuildingUnitID.HasValue)
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", societyBuildingUnitID);
            }
            else
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyMember>("ListSocietyMembersBySocietyBuildingUnitIDForNoOpeningBalance", societyBuildingUnitIDParameter);
        }
        public ObjectResult<SocietyBuildingUnitBalanceWithBillReceiptExistCheck> ListSocietyBuildingUnitOpeningBalancesBySocietyBuildingUnitIDWithBillReceiptExistCheck(Nullable<System.Guid> societyBuildingUnitID)
        {
    
            ObjectParameter societyBuildingUnitIDParameter;
    
            if (societyBuildingUnitID.HasValue)
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", societyBuildingUnitID);
            }
            else
            {
                societyBuildingUnitIDParameter = new ObjectParameter("SocietyBuildingUnitID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyBuildingUnitBalanceWithBillReceiptExistCheck>("ListSocietyBuildingUnitOpeningBalancesBySocietyBuildingUnitIDWithBillReceiptExistCheck", societyBuildingUnitIDParameter);
        }
        public ObjectResult<AcFinalReport> GetBalanceSheetReportBySocietySubscriptionID(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<AcFinalReport>("GetBalanceSheetReportBySocietySubscriptionID", societySubscriptionIDParameter);
        }
        public ObjectResult<AcFinalReportSchedule> GetBalanceSheetScheduleBySocietySubscriptionID(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<AcFinalReportSchedule>("GetBalanceSheetScheduleBySocietySubscriptionID", societySubscriptionIDParameter);
        }
        public ObjectResult<AcFinalReport> GetIncomeExpenditureReportBySocietySubscriptionID(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<AcFinalReport>("GetIncomeExpenditureReportBySocietySubscriptionID", societySubscriptionIDParameter);
        }
        public ObjectResult<AcFinalReportSchedule> GetIncomeExpenditureScheduleBySocietySubscriptionID(Nullable<System.Guid> societySubscriptionID)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
            return base.ExecuteFunction<AcFinalReportSchedule>("GetIncomeExpenditureScheduleBySocietySubscriptionID", societySubscriptionIDParameter);
        }
        public ObjectResult<MemberBalance> ListMemberBalancesForSocietySubscription(Nullable<System.Guid> societySubscriptionID, Nullable<System.Guid> societyBuildingID, string billAbbreviation)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
    
            ObjectParameter societyBuildingIDParameter;
    
            if (societyBuildingID.HasValue)
            {
                societyBuildingIDParameter = new ObjectParameter("SocietyBuildingID", societyBuildingID);
            }
            else
            {
                societyBuildingIDParameter = new ObjectParameter("SocietyBuildingID", typeof(System.Guid));
            }
    
            ObjectParameter billAbbreviationParameter;
    
            if (billAbbreviation != null)
            {
                billAbbreviationParameter = new ObjectParameter("BillAbbreviation", billAbbreviation);
            }
            else
            {
                billAbbreviationParameter = new ObjectParameter("BillAbbreviation", typeof(string));
            }
            return base.ExecuteFunction<MemberBalance>("ListMemberBalancesForSocietySubscription", societySubscriptionIDParameter, societyBuildingIDParameter, billAbbreviationParameter);
        }
        public ObjectResult<AcFinalReport> GetBalanceSheetReportAsOnDateBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> asOnDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter asOnDateParameter;
    
            if (asOnDate.HasValue)
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", asOnDate);
            }
            else
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcFinalReport>("GetBalanceSheetReportAsOnDateBySocietyID", societyIDParameter, asOnDateParameter);
        }
        public ObjectResult<AcFinalReportSchedule> GetBalanceSheetScheduleAsOnDateBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> asOnDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter asOnDateParameter;
    
            if (asOnDate.HasValue)
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", asOnDate);
            }
            else
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcFinalReportSchedule>("GetBalanceSheetScheduleAsOnDateBySocietyID", societyIDParameter, asOnDateParameter);
        }
        public ObjectResult<AcFinalReport> GetIncomeExpenditureReportForPeriodBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcFinalReport>("GetIncomeExpenditureReportForPeriodBySocietyID", societyIDParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<AcFinalReportSchedule> GetIncomeExpenditureScheduleForPeriodBySocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<AcFinalReportSchedule>("GetIncomeExpenditureScheduleForPeriodBySocietyID", societyIDParameter, fromDateParameter, toDateParameter);
        }
        public ObjectResult<MemberLedger> ListMemberLedgerForSocietySubscriptionIDPeriod(Nullable<System.Guid> societySubscriptionID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
    
            ObjectParameter societySubscriptionIDParameter;
    
            if (societySubscriptionID.HasValue)
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", societySubscriptionID);
            }
            else
            {
                societySubscriptionIDParameter = new ObjectParameter("SocietySubscriptionID", typeof(System.Guid));
            }
    
            ObjectParameter startDateParameter;
    
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(System.DateTime));
            }
    
            ObjectParameter endDateParameter;
    
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<MemberLedger>("ListMemberLedgerForSocietySubscriptionIDPeriod", societySubscriptionIDParameter, startDateParameter, endDateParameter);
        }
        public ObjectResult<SocietyBillSeriesWithLastDates> ListSocietyBillSeriesWithLastDatesForSocietyID(Nullable<System.Guid> societyID)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
            return base.ExecuteFunction<SocietyBillSeriesWithLastDates>("ListSocietyBillSeriesWithLastDatesForSocietyID", societyIDParameter);
        }
        public ObjectResult<AcClBalance> ListAcBalancesAsOnWithSocietyIDNature(Nullable<System.Guid> societyID, Nullable<System.DateTime> asOnDate, string natures)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter asOnDateParameter;
    
            if (asOnDate.HasValue)
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", asOnDate);
            }
            else
            {
                asOnDateParameter = new ObjectParameter("AsOnDate", typeof(System.DateTime));
            }
    
            ObjectParameter naturesParameter;
    
            if (natures != null)
            {
                naturesParameter = new ObjectParameter("Natures", natures);
            }
            else
            {
                naturesParameter = new ObjectParameter("Natures", typeof(string));
            }
            return base.ExecuteFunction<AcClBalance>("ListAcBalancesAsOnWithSocietyIDNature", societyIDParameter, asOnDateParameter, naturesParameter);
        }
        public ObjectResult<AcClBalance> ListCashBankOppBalancesByDrCrSocietyID(Nullable<System.Guid> societyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string drCr)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter fromDateParameter;
    
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("FromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("FromDate", typeof(System.DateTime));
            }
    
            ObjectParameter toDateParameter;
    
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("ToDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("ToDate", typeof(System.DateTime));
            }
    
            ObjectParameter drCrParameter;
    
            if (drCr != null)
            {
                drCrParameter = new ObjectParameter("DrCr", drCr);
            }
            else
            {
                drCrParameter = new ObjectParameter("DrCr", typeof(string));
            }
            return base.ExecuteFunction<AcClBalance>("ListCashBankOppBalancesByDrCrSocietyID", societyIDParameter, fromDateParameter, toDateParameter, drCrParameter);
        }
        public ObjectResult<MemberUsersForRole_Result> MemberUsersForRole(Nullable<System.Guid> societyID, Nullable<System.Guid> societyMemberID, string role)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter societyMemberIDParameter;
    
            if (societyMemberID.HasValue)
            {
                societyMemberIDParameter = new ObjectParameter("SocietyMemberID", societyMemberID);
            }
            else
            {
                societyMemberIDParameter = new ObjectParameter("SocietyMemberID", typeof(System.Guid));
            }
    
            ObjectParameter roleParameter;
    
            if (role != null)
            {
                roleParameter = new ObjectParameter("Role", role);
            }
            else
            {
                roleParameter = new ObjectParameter("Role", typeof(string));
            }
            return base.ExecuteFunction<MemberUsersForRole_Result>("MemberUsersForRole", societyIDParameter, societyMemberIDParameter, roleParameter);
        }
        public ObjectResult<MemberRecipient> ListMemberBySocietyIDRole(Nullable<System.Guid> societyID, Nullable<System.Guid> societyMemberID, string role)
        {
    
            ObjectParameter societyIDParameter;
    
            if (societyID.HasValue)
            {
                societyIDParameter = new ObjectParameter("SocietyID", societyID);
            }
            else
            {
                societyIDParameter = new ObjectParameter("SocietyID", typeof(System.Guid));
            }
    
            ObjectParameter societyMemberIDParameter;
    
            if (societyMemberID.HasValue)
            {
                societyMemberIDParameter = new ObjectParameter("SocietyMemberID", societyMemberID);
            }
            else
            {
                societyMemberIDParameter = new ObjectParameter("SocietyMemberID", typeof(System.Guid));
            }
    
            ObjectParameter roleParameter;
    
            if (role != null)
            {
                roleParameter = new ObjectParameter("Role", role);
            }
            else
            {
                roleParameter = new ObjectParameter("Role", typeof(string));
            }
            return base.ExecuteFunction<MemberRecipient>("ListMemberBySocietyIDRole", societyIDParameter, societyMemberIDParameter, roleParameter);
        }

        #endregion

    }
}
