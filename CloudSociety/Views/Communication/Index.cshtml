@model IEnumerable<CloudSocietyEntities.Communication>
@{
    ViewBag.Title = "Communication";
    ViewBag.Header = "Communications";
    ViewBag.SocietyNameHeader = ViewBag.SocietyHead;
    Layout = "~/Views/Shared/SocietyLayout.cshtml";

    var id = (Guid)ViewBag.id;
    var draftMessages = (IEnumerable<CloudSocietyEntities.Communication>)ViewBag.DraftMessages;
    var publishedMessages = (IEnumerable<CloudSocietyEntities.Communication>)ViewBag.PublishedMessages;
    var curUser = Membership.GetUser();
        
}
<link rel="stylesheet" href="../../Content/themes/base/jquery-ui.css">
@*<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">*@
<script src="../../Scripts/jquery-1.10.2.js"></script>
@*<script src="//code.jquery.com/jquery-1.10.2.js"></script>*@
<script src="../../Scripts/jquery-ui.js"></script>
@*<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>*@
@*==== Scripts to be added for AJAX calendar START ====*@
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/MicrosoftAjax.debug.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.ExtenderBase.BaseScripts.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.Common.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.DateTime.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Animation.Animations.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.PopupExtender.PopupBehavior.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Animation.AnimationBehavior.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.Threading.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Compat.Timer.Timer.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Calendar.CalendarBehavior.js")"
        type="text/javascript"></script>
<script type="text/javascript">
    Sys.Application.add_init(appInit);
    function appInit() {
        $create(AjaxControlToolkit.CalendarBehavior, { format: "dd-MMM-yyyy" }, null, null, $get('FromDate'));
        $create(AjaxControlToolkit.CalendarBehavior, { format: "dd-MMM-yyyy" }, null, null, $get('ToDate'));
    }
</script>
@*==== END ====*@
<script type="text/javascript">
    $(function () {
        $("#tabs").tabs();
    });
    function toggelContain() {
        //if (!$('#tblSearch')[0].hidden) {
        //    $('#tblSearch').show();
        //} else {
        //    $('#tblSearch').hide();
        //}
        $("#tblSearch").toggle();
        if ($("i").hasClass("down")) {
            $("i").removeClass("down");
            $("i").addClass("up");
        } else if ($("i").hasClass("up")) {
            $("i").removeClass("up");
            $("i").addClass("down");
        }
    }

</script>
<style>
    .Width5Per {
        width: 5%;
    }

    .Width4Per {
        width: 4%;
        text-align: center;
    }

    .Width100Per {
        width: 100%;
    }

    .Width10Per {
        width: 10%;
    }

    .Width20Per {
        width: 20%;
    }

    .Width7Per {
        width: 7%;
    }

    .Width7PerCen {
        width: 7%;
        text-align: center;
    }

    .Width40Per {
        width: 40%;
    }

    i {
        border: solid black;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
    }

    .up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }
</style>

@using (Html.BeginForm("Index", "Communication", FormMethod.Get))
{
    @Html.ValidationSummary(false, "Following errors occurred while processing your request")
    <fieldset style="width: 936px; padding: 0 0 0 0 !important; border-radius: 4px !important;">
        <div style="text-align: left; vertical-align: central !important; width: 100%; height: 30px; border-radius: 4px; background-color: #e9e9e9; border: 1px solid #dddddd; cursor: pointer;" onclick="toggelContain()">
            @*<div style="width:100%;height:7px;"></div>*@
            <table style="width: 100%">
                <tr>
                    <td style="width: 90%"><span style="margin-left: 10px !important; font-weight: bold">Search</span></td>
                    <td style="width: 10%"><i style="float: right;" class="down"></i></td>
                </tr>
            </table>
            @*<span style="margin-left: 10px !important;">Search</span><i style="float:right;" class="down"></i>*@
        </div>
        <table style="margin-bottom: 20px; display: none;" id="tblSearch">
            <tr>
                <td>From </td>
                <td>:</td>
                <td>
                    @Html.TextBox("FromDate", string.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.FromDate), new { @class = "shortWidth" })
                </td>
            </tr>
            <tr>
                <td>To </td>
                <td>:</td>
                <td>
                    @Html.TextBox("ToDate", string.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.ToDate), new { @class = "shortWidth" })
                </td>
            </tr>
            <tr>
                <td>Ticket # </td>
                <td>:</td>
                <td>
                    @Html.TextBox("ticketNo", (long?)ViewBag.ticketNo, new { @class = "mediumWidth" })
                </td>
            </tr>
            <tr>
                <td>Type </td>
                <td>:</td>
                <td>
                    @Html.DropDownList("CommunicationTypeID", new SelectList(ViewBag.communicationTypeList as System.Collections.IEnumerable, "CommunicationTypeID", "CommunicationType1"), "<- Select Communication Type ->")
                </td>
            </tr>
            <tr>
            <tr>
                <td>Ticket Status</td>
                <td>:</td>
                <td>
                    @Html.DropDownList("TicketStatus", (List<SelectListItem>)ViewBag.TicketStatusList)
                </td>
            </tr>
            <tr>
                <td colspan="3" align="center">
                    <input type="submit" value="Search" class="buttton" style="width: 45px; height: 23px; vertical-align: middle;" onclick="return CompareTwoDates();" />
                </td>
            </tr>
        </table>
    </fieldset>
    @Html.Hidden("id", (Guid)ViewBag.id)
}
<br />
@if (!string.IsNullOrWhiteSpace(ViewBag.Message))
{
    <span class="EditDelete">
        @ViewBag.Message
    </span>
}
<br />
<div id="tabs">
    <ul>
        <li><a href="#tabs-1">Incoming Messages</a></li>
        <li><a href="#tabs-2">Draft Messages</a></li>
        <li><a href="#tabs-3">Sent Messages</a></li>
    </ul>
    <div id="tabs-1">
        @if (Model.Count() > 0)
        {
            var gridIncoming = new WebGrid(Model, canPage: true, canSort: true, rowsPerPage: 10);
            gridIncoming.Pager(WebGridPagerModes.NextPrevious);
            WebGridColumn[] columnSetIncoming = new WebGridColumn[10];
            columnSetIncoming[0] = gridIncoming.Column("", "", @<text><div>@Html.ActionLink("View", "Detail", new { id = id, communicationId = item.CommunicationID, myMessage = false }, new { @class = "EditDelete", @style = "color: #B80103 !important;" })</div></text>, style: "Width4Per");
            columnSetIncoming[1] = gridIncoming.Column("TicketNumber", "Ticket#", @<text><span>@String.Format("{0:000000}", item.TicketNumber)</span></text>, canSort: true, style: "Width5Per");
            columnSetIncoming[2] = gridIncoming.Column("CommunicationType.CommunicationType1", "Type", @<text><span>@item.CommunicationType.CommunicationType1</span></text>, canSort: true, style: "Width10Per");
            columnSetIncoming[3] = gridIncoming.Column("UpdatedOn", "Sent On", @<text><span>@String.Format("{0:dd-MMM-yyyy HH:MM}", item.UpdatedOn)</span></text>, canSort: true, style: "Width10Per");
            columnSetIncoming[4] = gridIncoming.Column("SocietyMember.Member", "Sent By", @<text><span>@item.SocietyMember.Member</span></text>, canSort: true, style: "Width10Per");
            columnSetIncoming[5] = gridIncoming.Column("FlatNo", "Unit No", @<text><span>@item.FlatNo</span></text>, canSort: true, style: "Width7Per");
            columnSetIncoming[6] = gridIncoming.Column("Subject", "Subject", @<text><span>@item.Subject</span></text>, canSort: true, style: "Width40Per");
            columnSetIncoming[7] = gridIncoming.Column("LastUpdate", "Last Update", @<text><span>@String.Format("{0:dd-MMM-yyyy HH:MM}", item.LastUpdate)</span></text>, canSort: true, style: "Width10Per");
            columnSetIncoming[8] = gridIncoming.Column("Replies", "No of Replies", @<text><span>@item.Replies</span></text>, canSort: true, style: "Width4Per");
            columnSetIncoming[9] = gridIncoming.Column("Closed", "Status", @<text><span>@(item.Closed ? "Closed" : "Open") </span></text>, canSort: true, style: "Width4Per");
            @gridIncoming.GetHtml(tableStyle: "table", footerStyle: "webgrid-footer", rowStyle: "TableRow", alternatingRowStyle: "altTableRow", columns: gridIncoming.Columns(columnSetIncoming));
        }
        else
        {
            <table border="0" cellpadding="2" cellspacing="0" class="table">
                <tr class="TableRow">
                    <td>Currently there are no Records
                    </td>
                </tr>
            </table>
        }
    </div>
    <div id="tabs-2">
        <div class="buttton" style="width: 65px;">
            @Html.ActionLink("Create New", "Create", new { id = id }, new { @style = "color: white !important;" })
        </div>
        <br />
        <table border="0" cellpadding="2" cellspacing="0" class="table">
            @{
                int Count = 1;
            }
            @foreach (var dmsg in draftMessages)
            {                
                if (Count == 1)
                {
                <tr>
                    <th></th>
                    <th>Type</th>
                    <th>Created On</th>
                    <th>Created By</th>
                    <th>Subject</th>
                </tr>
                }

                <tr @if ((Count % 2) == 0)
                    { <text> class="TableRow" </text>  }
                    else
                    { <text> class="altTableRow" </text> }>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = id, communicationId = dmsg.CommunicationID }, new { @class = "EditDelete", @style = "color: #B80103 !important;" }) | 
                        @Html.ActionLink("Delete", "Delete", new { id = id, communicationId = dmsg.CommunicationID }, new { @class = "EditDelete", @style = "color: #B80103 !important;" })
                        @if (dmsg.CommunicationType.IsApprovalNeeded)
                        {
                            if (null != curUser)
                            {
                                if ((Guid)curUser.ProviderUserKey != dmsg.CreatedByID && Roles.IsUserInRole(curUser.UserName, "OfficeBearer"))
                                {
                            @Html.Raw("|") @Html.ActionLink("Approve", "Publish", new { id = id, communicationId = dmsg.CommunicationID }, new { @class = "EditDelete", @style = "color: #B80103 !important;" })
                                }
                            }
                        }
                        else
                        {
                            @Html.Raw("|")  @Html.ActionLink("Publish", "Publish", new { id = id, communicationId = dmsg.CommunicationID }, new { @class = "EditDelete", @style = "color: #B80103 !important;" })
                        }

                    </td>
                    <td>
                        @dmsg.CommunicationType.CommunicationType1
                    </td>
                    <td>
                        @string.Format("{0:dd-MMM-yyyy HH:MM}", dmsg.CreatedOn)
                    </td>
                    <td>
                        @dmsg.CreatedByMember
                    </td>
                    <td>
                        @dmsg.Subject
                    </td>
                </tr>
                        Count = Count + 1;
            }
            @if (Count == 1)
            {
                <tr class="TableRow">
                    <td>Currently there are no Records</td>
                </tr> }
        </table>
    </div>
    <div id="tabs-3">
        @if (publishedMessages.Count() > 0)
        {
            var gridPublished = new WebGrid(publishedMessages, canPage: true, canSort: true, rowsPerPage: 10);
            gridPublished.Pager(WebGridPagerModes.NextPrevious);
            WebGridColumn[] columnSetPublished = new WebGridColumn[9];
            columnSetPublished[0] = gridPublished.Column("", "", @<text><div>@Html.ActionLink("View", "Detail", new { id = id, communicationId = item.CommunicationID, myMessage = true }, new { @class = "EditDelete", @style = "color: #B80103 !important;" })</div></text>, style: "Width5Per");
            columnSetPublished[1] = gridPublished.Column("TicketNumber", "Ticket#", @<text><span>@String.Format("{0:000000}", item.TicketNumber)</span></text>, canSort: true, style: "Width7Per");
            columnSetPublished[2] = gridPublished.Column("CommunicationType.CommunicationType1", "Type", @<text><span>@item.CommunicationType.CommunicationType1</span></text>, canSort: true, style: "Width20Per");
            columnSetPublished[3] = gridPublished.Column("UpdatedOn", "Sent On", @<text><span>@String.Format("{0:dd-MMM-yyyy HH:MM}", item.UpdatedOn)</span></text>, canSort: true, style: "Width10Per");
            columnSetPublished[4] = gridPublished.Column("Subject", "Subject", @<text><span>@item.Subject</span></text>, canSort: true, style: "Width20Per");
            columnSetPublished[5] = gridPublished.Column("LastUpdate", "Last Update", @<text><span>@String.Format("{0:dd-MMM-yyyy HH:MM}", item.LastUpdate)</span></text>, canSort: true, style: "Width10Per");
            columnSetPublished[6] = gridPublished.Column("Replies", "No of Replies", @<text><span>@item.Replies</span></text>, canSort: true, style: "Width7PerCen");
            columnSetPublished[7] = gridPublished.Column("ApprovedByWithUnit", "Approved By", @<text><span>@item.ApprovedByWithUnit</span></text>, canSort: true, style: "Width20Per");
            columnSetPublished[8] = gridPublished.Column("Closed", "Status", @<text><span>@(item.Closed ? "Closed" : "Open") </span></text>, canSort: true, style: "Width4Per");
            @gridPublished.GetHtml(tableStyle: "table Width100Per", footerStyle: "webgrid-footer", rowStyle: "TableRow", alternatingRowStyle: "altTableRow", columns: gridPublished.Columns(columnSetPublished));
        }
        else
        {
            <table border="0" cellpadding="2" cellspacing="0" class="table">
                <tr class="TableRow">
                    <td>Currently there are no Records
                    </td>
                </tr>
            </table>
        }

    </div>
</div>

