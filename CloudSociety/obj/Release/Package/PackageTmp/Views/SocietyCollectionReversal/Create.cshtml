@model CloudSocietyEntities.SocietyCollectionReversal
@{
    ViewBag.Title = "Collection Reversal";
    ViewBag.Header = "Collection Reversal";
    ViewBag.SocietyNameHeader = ViewBag.SocietyHead;
    Layout = "~/Views/Shared/SocietyLayout.cshtml";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/DateFuncs.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/SocietyReceipt.js")" type="text/javascript"></script>
@*==== Scripts to be added for AJAX calendar START ====*@
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/MicrosoftAjax.debug.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.ExtenderBase.BaseScripts.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.Common.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.DateTime.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Animation.Animations.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.PopupExtender.PopupBehavior.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Animation.AnimationBehavior.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Common.Threading.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Compat.Timer.Timer.js")"
        type="text/javascript"></script>
<script src="@Url.Content("~/Content/AjaxControlToolkit/3.0.20820.16598/3.0.20820.0/AjaxControlToolkit.Calendar.CalendarBehavior.js")"
        type="text/javascript"></script>
<script type="text/javascript">
    Sys.Application.add_init(appInit);
    function appInit() {
        $create(AjaxControlToolkit.CalendarBehavior, { format: "dd-MMM-yyyy" }, null, null, $get('ReversalDate'));
        $("#SocietyMemberID").hide();
        $("#SocietyBuildingUnitID").change(function () {
            var SocietyMemberID = $get("SocietyMemberID");
            SocietyMemberID.style.display = 'block';
            SocietyMemberID.options.length = 0;
            var buildingunitId = this.value;
            if (buildingunitId) {
                var url = "/SocietyMember/ListForBuildingUnit?societybuildingunitid=" + buildingunitId;
                //                $.get(url, function (data) {
                //                    var newOption;
                //                    for (var k = 0; k < data.length; k++) {
                //                        newOption = new Option(data[k].Text, data[k].Value);
                //                        SocietyMemberID.options.add(newOption);
                //                    }
                //                }, "json");
                $.ajax({
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    url: url,
                    data: "{}",
                    dataType: "json",
                    success: function (data) {
                        var newOption;
                        for (var k = 0; k < data.length; k++) {
                            newOption = new Option(data[k].Text, data[k].Value);
                            SocietyMemberID.options.add(newOption);
                        }
                        var billAbbreviation = $("#BillAbbreviation").val();
                        if (billAbbreviation) {
                            var memberId = SocietyMemberID.value;
                            if (memberId) {
                                getReceiptList(billAbbreviation, buildingunitId, memberId);
                            }
                        }
                    }
                });
            }
        });
        $("#BillAbbreviation").change(function () {
            var billAbbreviation = this.value;
            if (billAbbreviation) {
                var url = "/SocietyBill/LastBillDate?societySubscriptionID=" + $("#SocietySubscriptionID").val() + "&billAbbreviation=" + billAbbreviation;
                $.get(url, function (data) {
                    $("#StartRange").val(data);
                });
                var buildingunitId = $("#SocietyBuildingUnitID").val();
                if (buildingunitId) {
                    var memberId = $("#SocietyMemberID").val();
                    if (memberId) {
                        getReceiptList(billAbbreviation, buildingunitId, memberId);
                    }
                }
            }
        });
        $("#SocietyMemberID").change(function () {
            var memberId = this.value;
            if (memberId) {
                var buildingunitId = $("#SocietyBuildingUnitID").val();
                if (buildingunitId) {
                    var billAbbreviation = $("#BillAbbreviation").val();
                    if (billAbbreviation) {
                        getReceiptList(billAbbreviation, buildingunitId, memberId);
                    }
                }
            }
        });
        $("#SocietyReceiptID").change(function () {
            var receiptId = this.value;
            if (receiptId && receiptId != "") {
                var url = "/SocietyReceipt/Get/" + receiptId;
                $.get(url, function (data) {
                    var receipt = eval(data);
                    $("#PrincipalAdjusted").val(receipt.PrincipalAdjusted);
                    $("#InterestAdjusted").val(receipt.InterestAdjusted);
                    $("#NonChgAdjusted").val(receipt.NonChgAdjusted);
                    $("#TaxAdjusted").val(receipt.TaxAdjusted);
                    $("#Advance").val(receipt.Advance);
                    $("#PayModeCode").val(receipt.PayModeCode);
                    //                    $("#PayModeCode option[value='" + receipt.PayModeCode + "']").attr("selected", "selected");
                    $("#PayRefNo").val(receipt.PayRefNo);
                    $("#PayRefDate").val(receipt.PayRefDate);
                    $("#BankID").val(receipt.BankID);
                    $("#Branch").val(receipt.Branch);
                    $("#PrincipalAdjusted").attr('disabled', 'disabled');
                    $("#InterestAdjusted").attr('disabled', 'disabled');
                    $("#NonChgAdjusted").attr('disabled', 'disabled');
                    $("#TaxAdjusted").attr('disabled', 'disabled');
                    $("#Advance").attr('disabled', 'disabled');
                    $("#PayModeCode").attr('disabled', 'disabled');
                    $("#PayRefNo").attr('disabled', 'disabled');
                    $("#PayRefDate").attr('disabled', 'disabled');
                    $("#BankID").attr('disabled', 'disabled');
                    $("#Branch").attr('disabled', 'disabled');
                }, "json");
            } else {
                $("#PrincipalAdjusted").removeAttr('disabled');
                $("#InterestAdjusted").removeAttr('disabled');
                $("#NonChgAdjusted").removeAttr('disabled');
                $("#TaxAdjusted").removeAttr('disabled');
                $("#Advance").removeAttr('disabled');
                $("#PayModeCode").removeAttr('disabled');
                $("#PayRefNo").removeAttr('disabled');
                $("#PayRefDate").removeAttr('disabled');
                $("#BankID").removeAttr('disabled');
                $("#Branch").removeAttr('disabled');
            }
        });
//        $("#ReversalDate").change(function () {
//            return DateRangeCheck(this.value, document.getElementById("StartRange").value, document.getElementById("EndRange").value);
//        });
//        $("#ReversalDate").onmouseover(function () {
//            ShowLastBillDate();
//        });
//        $("#ReversalDate").onmouseout(function () {
//            HideLastBillDate();
//        });
    }
    function getReceiptList(billAbbreviation, buildingunitId, memberId) {
        var url = "/SocietyReceipt/ListForMember?billabbreviation=" + billAbbreviation + "&societybuildingunitId=" + buildingunitId + "&societymemberId=" + memberId;
        $.get(url, function (data) {
            var societyReceiptID = $get("SocietyReceiptID");
            societyReceiptID.options.length = 0;
//            for (var i = societyReceiptID.options.length - 1; i > 0; i--) {
//                societyReceiptID.options[i] = null;
//            }
            var newOption;
            newOption = new Option("--Select Receipt--","");
            societyReceiptID.options.add(newOption);
            for (var k = 0; k < data.length; k++) {
                newOption = new Option(data[k].Text, data[k].Value);
                societyReceiptID.options.add(newOption);
            }
        }, "json");
    }
    function validateDate() {
        var retval = DateRangeCheck(document.getElementById("ReversalDate").value, document.getElementById("StartRange").value, document.getElementById("EndRange").value);
        if (retval) {
            $("#PrincipalAdjusted").removeAttr('disabled');
            $("#InterestAdjusted").removeAttr('disabled');
            $("#NonChgAdjusted").removeAttr('disabled');
            $("#TaxAdjusted").removeAttr('disabled');
            $("#Advance").removeAttr('disabled');
            $("#PayModeCode").removeAttr('disabled');
            $("#PayRefNo").removeAttr('disabled');
            $("#PayRefDate").removeAttr('disabled');
            $("#BankID").removeAttr('disabled');
            $("#Branch").removeAttr('disabled');
        }
        return retval;
    }
//    (function ($) {
//        $.fn.disable = function () {
//            return $(this).each(function () {
//                $(this).attr('disabled', 'disabled');
//            });
//        };
//     })(jQuery);
//    (function ($) { $.fn.enable = function () { return $(this).each(function () { $(this).removeAttr('disabled'); }); }; })(jQuery);
       
</script>
@*==== END ====*@
@using (Html.BeginForm())
{
    @Html.ValidationSummary(false, "Following errors occurred while processing your request")
    <br />
    <fieldset style="width: 600px">
    <legend>Create Society Collection Reversal</legend>
        <table>
        @if (ViewBag.BillAbbreviation == String.Empty)
        {
            <tr>
                <td>
                    Bill Abbreviation :
                </td>
                <td>
                    @Html.DropDownList("BillAbbreviation", new SelectList(ViewBag.BillAbbreviationList as System.Collections.IEnumerable, "BillAbbreviation", "BillAbbreviation"), "<-Select Bill Abbreviation->")
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.BillAbbreviation)</span>
                </td>
            </tr>
        }
            <tr>
                <td>
                    Building Unit :
                </td>
                <td>
                    @Html.DropDownList("SocietyBuildingUnitID", new SelectList(ViewBag.SocietyBuildingUnitList as System.Collections.IEnumerable, "SocietyBuildingUnitID", "BuildingUnit"), "<-Select Unit->")
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.SocietyBuildingUnitID)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Society Member :
                </td>
                <td>
                    <select name="SocietyMemberID" id="SocietyMemberID"></select>
@*                    @Html.DropDownList("SocietyMemberID", new SelectList(ViewBag.SocietyMemberList as System.Collections.IEnumerable, "SocietyMemberID", "Member"), "<-Select Member->")
*@                    <span class="editor-field">@Html.ValidationMessageFor(model => model.SocietyMemberID)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Reversal Date :
                </td>
                <td>
                    @Html.TextBox("ReversalDate", null, new { @class = "shortWidth", onmouseover = "ShowLastBillDate()", onmouseout = "HideLastBillDate()", onkeypress="return false;", onkeydown="return false;" })
                    <div id="displayLastBillDate" style="visibility: hidden">
                        Reversal Date must be in between @String.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.StartRange)
                        and @String.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.EndRange)</div>
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.ReversalDate)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Collection Receipt :
                </td>
                <td>
                    <select name="SocietyReceiptID" id="SocietyReceiptID">
                        <option value="">--Select Receipt--</option>
                    </select>
@*                    @Html.DropDownList("SocietyReceiptID", new SelectList(ViewBag.SocietyReceiptDetails as System.Collections.IEnumerable, "SocietyReceiptID", "SocietyReceiptDetails"), "<-Select Receipt->")*@
                   <span class="editor-field">@Html.ValidationMessageFor(model => model.SocietyReceiptID)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Particulars :
                </td>
                <td>
                    @Html.TextBox("Particulars", null, new { @class = "maxWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.Particulars)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Principal Adjusted :
                </td>
                <td>
                    @Html.TextBox("PrincipalAdjusted", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.PrincipalAdjusted)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Interest Adjusted :
                </td>
                <td>
                    @Html.TextBox("InterestAdjusted", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.InterestAdjusted)</span>
                </td>
            </tr>
            <tr>
                <td>
                    NonChg Adjusted :
                </td>
                <td>
                    @Html.TextBox("NonChgAdjusted", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.NonChgAdjusted)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Tax Adjusted :
                </td>
                <td>
                    @Html.TextBox("TaxAdjusted", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.TaxAdjusted)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Advance :
                </td>
                <td>
                    @Html.TextBox("Advance", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.Advance)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Pay Mode :
                </td>
                <td>                   
                    @Html.DropDownList("PayModeCode", new SelectList(ViewBag.PayModeList as System.Collections.IEnumerable, "PayModeCode", "PayMode"))
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.PayModeCode)</span>
                </td>
            </tr>
        </table>
        <table border="0" cellpadding="0" cellspacing="0">
            <tr>
                <td width="108px">
                    Pay Ref No :
                </td>
                <td>
                    @Html.TextBox("PayRefNo", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.PayRefNo)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Pay Ref Date :
                </td>
                <td>
                    @Html.TextBox("PayRefDate", null, new { @class = "shortWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.PayRefDate)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Bank :
                </td>
                <td>
                    @Html.DropDownList("BankID", new SelectList(ViewBag.BankList as System.Collections.IEnumerable, "BankID", "Name"), "<- Select Bank ->")
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.BankID)</span>
                </td>
            </tr>
            <tr>
                <td>
                    Branch :
                </td>
                <td>
                    @Html.TextBox("Branch", null, new { @class = "maxWidth" })
                    <span class="editor-field">@Html.ValidationMessageFor(model => model.Branch)</span>
                </td>
            </tr>
            <tr>
                <td colspan="2" align="center">
                    <input type="submit" value="Create" class="buttton" style="width: 45px; height: 23px; 
                        vertical-align: middle;" onclick="return validateDate()"/>
                </td>
            </tr>
        </table>
        @Html.Hidden("SocietyID", (Guid)@ViewBag.SocietyID)
        @Html.Hidden("SocietySubscriptionID", (Guid)@ViewBag.SocietySubscriptionID)
        @Html.Hidden("EndRange", String.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.EndRange))
        @{
        if (ViewBag.BillAbbreviation == String.Empty)
        {
            @Html.Hidden("StartRange", String.Empty)
        }
        else
        {
            @Html.Hidden("BillAbbreviation", (String)ViewBag.BillAbbreviation)
            @Html.Hidden("StartRange", String.Format("{0:dd-MMM-yyyy}", (DateTime)ViewBag.StartRange))
        }
        }
    </fieldset>   
  
}
<div>
    @Html.ActionLink("Back to List", "Index", new { id = ViewBag.SocietySubscriptionID }, new { @class = "EditDelete" })
</div>



@*<script type="text/javascript">
    var SocietyBuildingUnitID;
    var SocietyMemberID;
    function pageLoad() {
        SocietyBuildingUnitID = $get("SocietyBuildingUnitID");
        SocietyMemberID = $get("SocietyMemberID");
        $addHandler(SocietyBuildingUnitID, "change", bindOptions); bindOptions();
    }
    function bindOptions() {
        SocietyMemberID.options.length = 0;
        var buildingunitId = SocietyBuildingUnitID.value;
        if (buildingunitId) {
            var url = "/SocietyMember/SocietyMembersForBuildingUnit/" + buildingunitId; 
            getContent(url, bindOptionResults);
        }
    }
    function bindOptionResults(data) {
        var newOption;
        for (var k = 0; k < data.length; k++) {
            newOption = new Option(data[k].Name, data[k].Id);
            SocietyMemberID.options.add(newOption);
        }
    }
    /**** should be in library ***/
    function getContent(url, callback) {
        var request = new Sys.Net.WebRequest();
        request.set_url(url); request.set_httpVerb("GET");
        var del = Function.createCallback(getContentResults, callback);
        request.add_completed(del);
        request.invoke();
    }
    function getContentResults(executor, eventArgs, callback) {
        if (executor.get_responseAvailable()) {
            callback(eval("(" + executor.get_responseData() + ")"));
        } else {
            if (executor.get_timedOut())
                alert("Timed Out");
            else if (executor.get_aborted())
                alert("Aborted");
        }
    }     
</script>
*@
