using System;
using System.Web.Mvc;
using CloudSociety.Services;
using CloudSocietyEntities;
using System.Collections.Generic;
using System.Linq;
using System.Web.Security;

namespace CloudSociety.Controllers
{
    [Authorize(Roles = "Support,Subscriber,SocietyAdmin,SocietyUser,CompanyAdmin,CompanyUser,TrainingUser,TrialUser")]
    public class SocietyCollectionReversalController : Controller
    {
        private SocietyCollectionReversalService _service;
        const string _exceptioncontext = "SocietyCollectionReversal Controller";

        public SocietyCollectionReversalController()
        {
            _service = new SocietyCollectionReversalService(this.ModelState);
            //_PDFService = new PDFService(this.ModelState);
        }

        public ActionResult Index(Guid id)
        {
            ViewBag.SocietySubscriptionID = id;
            var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
            var societySubscription = societySubscriptionService.GetById(id);
            ViewBag.ShowSocietyMenu = true;
            ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
            ViewBag.ShowBillingMenu = societySubscriptionService.BillingEnabled(id);
            ViewBag.ShowAccountingMenu = societySubscriptionService.AccountingEnabled(id);
            ViewBag.ReadOnly = (societySubscription.PaidTillDate == null ? true : false) || societySubscription.Closed;
            ViewBag.TrialUser = (Roles.IsUserInRole("TrialUser"));
            ViewBag.IsPrevYearAccountingEnabled = societySubscriptionService.PrevYearAccountingEnabled(id);
            ViewBag.LockedTillDate = societySubscription.LockedTillDate;
            ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societySubscriptionService.GetById(id).SocietyID);

            return View(_service.ListByParentId(societySubscriptionService.GetById(id).SocietyID));
        }
        
        public ActionResult Details(Guid id)
        {
            var SocietyCollectonReverse = _service.GetById(id);
            var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
            ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectonReverse.SocietySubscriptionID);
            ViewBag.YearOpen = !societySubscriptionService.GetById(SocietyCollectonReverse.SocietySubscriptionID).Closed;
            return View(SocietyCollectonReverse);
        }

        //
        // GET: /SocietyCollectionReverse/Create

        public ActionResult Create(Guid id) //id = SocietySubscriptionID
        {
            ViewBag.SocietySubscriptionID = id;
            var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
            var societySubscription = societySubscriptionService.GetById(id);
            var societyId = societySubscription.SocietyID;
            ViewBag.SocietyID = societyId;
            ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
            var billAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyId);
            ViewBag.BillAbbreviation = String.Empty;
            DateTime startDate = (societySubscription.LockedTillDate == null ? societySubscription.SubscriptionStart : (DateTime)societySubscription.LockedTillDate.Value.AddDays(1));
            if (billAbbreviationList.Count() > 1)
            {
                ViewBag.BillAbbreviationList = billAbbreviationList;
                ViewBag.StartRange = startDate;  // societySubscription.SubscriptionStart;
            }
            else
            {
                var billAbbreviation = billAbbreviationList.FirstOrDefault().BillAbbreviation;
                ViewBag.BillAbbreviation = billAbbreviation;
                //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, billAbbreviation);
                //ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.Last());
//                ViewBag.StartRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                DateTime? startRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                ViewBag.StartRange = (startRange == null || startRange < startDate ? startDate : startRange);
                //var startRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                //ViewBag.StartRange = (startRange ?? societySubscription.SubscriptionStart);
            }
            ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);

            ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyId);

            ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societyId).Where(r => r.Active == true);
            ViewBag.BankList = new BankService(this.ModelState).List();
            return View();
        }


        //
        // POST: /SocietyCollectionReverse/Create

        [HttpPost]
        public ActionResult Create(Guid id, SocietyCollectionReversal SocietyCollectionReversalToCreate)
        {
            try
            {
                if (_service.Add(SocietyCollectionReversalToCreate))
                  //string s=  SocietyCollectionReversToCreate.BillAbbreviation
                {
                    return RedirectToAction("Index", new { id = id });
                }
                else
                {
                  //  ViewBag.SocietySubscriptionID = id;
                  //  var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                  //  var societySubscription = societySubscriptionService.GetById(id);
                  //  var societyID = societySubscription.SocietyID;
                  //  ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
                  //  ViewBag.SocietyID = societyID;
                  //  ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyID); ;
                  //  ViewBag.BillAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyID);
                  //  //ViewBag.BillAbbreviation = billAbbreviation;
                  //  ViewBag.SocietyMemberList = new SocietyMemberService(this.ModelState).ListBySocietyBuildUnitID(societyBuildingUnitID);
                  //  ViewBag.ReverseDate = SocietyCollectionReversalToCreate.ReversalDate;
                  //  ViewBag.SocietyReceiptDetails = new SocietyReceiptService(this.ModelState).ListByParentId(societyID);
                  //  ViewBag.Particulars = SocietyCollectionReversalToCreate.Particulars;
                  //  ViewBag.PrincipalAdjusted = SocietyCollectionReversalToCreate.PrincipalAdjusted;
                  //  ViewBag.InterestAdjusted = SocietyCollectionReversalToCreate.InterestAdjusted;
                  //  ViewBag.NonChgAdjusted = SocietyCollectionReversalToCreate.NonChgAdjusted;
                  //  //ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societyID).Where(r => r.Active == true);
                  //  //ViewBag.BankList = new BankService(this.ModelState).List();
                  // // List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, billAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
                  // // ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);
                  ////  ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.First());
                    ViewBag.SocietySubscriptionID = id;
                    var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                    var societySubscription = societySubscriptionService.GetById(id);
                    var societyId = societySubscription.SocietyID;
                    ViewBag.SocietyID = societyId;
                    ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
                    var billAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyId);
                    ViewBag.BillAbbreviation = String.Empty;
                    DateTime startDate = (societySubscription.LockedTillDate == null ? societySubscription.SubscriptionStart : (DateTime)societySubscription.LockedTillDate.Value.AddDays(1));
                    if (billAbbreviationList.Count() > 1)
                    {
                        ViewBag.BillAbbreviationList = billAbbreviationList;
                        ViewBag.StartRange = startDate;  // societySubscription.SubscriptionStart;
                    }
                    else
                    {
                        var billAbbreviation = billAbbreviationList.FirstOrDefault().BillAbbreviation;
                        ViewBag.BillAbbreviation = billAbbreviation;
                        //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, billAbbreviation);
                        //ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.Last());
//                        ViewBag.StartRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                        DateTime? startRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                        ViewBag.StartRange = (startRange == null || startRange < startDate ? startDate : startRange);
                    }
                    ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);

                    ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyId);

                    ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societyId).Where(r => r.Active == true);
                    ViewBag.BankList = new BankService(this.ModelState).List();
                    return View();
                }
            }
            catch (Exception ex)
            {
                this.ModelState.AddModelError(_exceptioncontext + " - Get", _exceptioncontext + " " + ex.Message);
                //ViewBag.SocietySubscriptionID = id;
                //var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                //var societySubscription = societySubscriptionService.GetById(id);
                //var societyID = societySubscription.SocietyID;
                //ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
                //ViewBag.SocietyID = societyID;
                //ViewBag.SocietyBuildingUnit = new CloudSociety.Services.SocietyBuildingUnitService(this.ModelState).GetById(societyBuildingUnitID);
                //ViewBag.BillAbbreviation = billAbbreviation;
                //ViewBag.SocietyMemberList = new SocietyMemberService(this.ModelState).ListBySocietyBuildUnitID(societyBuildingUnitID);
                //ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societyID).Where(r => r.Active == true);
                //ViewBag.BankList = new BankService(this.ModelState).List();
                //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, billAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
                //ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);
                //ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.First());
                ViewBag.SocietySubscriptionID = id;
                var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                var societySubscription = societySubscriptionService.GetById(id);
                var societyId = societySubscription.SocietyID;
                ViewBag.SocietyID = societyId;
                ViewBag.SocietyHead = societySubscriptionService.SocietyYear(id);
                var billAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyId);
                ViewBag.BillAbbreviation = String.Empty;
                DateTime startDate = (societySubscription.LockedTillDate == null ? societySubscription.SubscriptionStart : (DateTime)societySubscription.LockedTillDate.Value.AddDays(1));
                if (billAbbreviationList.Count() > 1)
                {
                    ViewBag.BillAbbreviationList = billAbbreviationList;
                    ViewBag.StartRange = startDate;  // societySubscription.SubscriptionStart;
                }
                else
                {
                    var billAbbreviation = billAbbreviationList.FirstOrDefault().BillAbbreviation;
                    ViewBag.BillAbbreviation = billAbbreviation;
                    //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, billAbbreviation);
                    //ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.Last());
//                    ViewBag.StartRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                    DateTime? startRange = new SocietyBillService(this.ModelState).GetLastBillDateBySocietySubscriptionIDBillAbbreviation(id, billAbbreviation);
                    ViewBag.StartRange = (startRange == null || startRange < startDate ? startDate : startRange);
                }
                ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);

                ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyId);

                ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societyId).Where(r => r.Active == true);
                ViewBag.BankList = new BankService(this.ModelState).List();
                return View();
            }
        }

        // EDIT is NOT USED
        public ActionResult Edit(Guid id) //id=SocietyCollectionReverseID
        {
            var SocietyCollectionReversal = _service.GetById(id);
            var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
            var societySubscription = societySubscriptionService.GetById(SocietyCollectionReversal.SocietySubscriptionID);
            var societyId = SocietyCollectionReversal.SocietyID;
            ViewBag.SocietyID = societyId;
            ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionReversal.SocietySubscriptionID);
            ViewBag.BillAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyId);
            ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyId);
            ViewBag.SocietyMemberList = new SocietyMemberService(this.ModelState).ListBySocietyBuildUnitID(SocietyCollectionReversal.SocietyBuildingUnitID);
            IEnumerable<SocietyReceipt> SocietyReceiptList = new SocietyReceiptService(this.ModelState).ListByParentId(societyId).Where(s => s.PayModeCode == "CH");
            ViewBag.SocietyReceiptDetails = SocietyReceiptList;
            ViewBag.SocietySubscriptionID = SocietyCollectionReversal.SocietySubscriptionID;
            ViewBag.PayModeCode = "CH";
            ViewBag.AcYear = SocietyCollectionReversal.AcYear;
            ViewBag.Serial = SocietyCollectionReversal.Serial;
            ViewBag.DocNo = SocietyCollectionReversal.DocNo;
            ViewBag.Advance = SocietyCollectionReversal.Advance;
            ViewBag.PayRefNo = SocietyCollectionReversal.PayRefNo;
            ViewBag.PayRefDate = SocietyCollectionReversal.PayRefDate;
            ViewBag.BankID = SocietyCollectionReversal.BankID;
            ViewBag.Branch = SocietyCollectionReversal.Branch;
            ViewBag.AcTransactionID = SocietyCollectionReversal.AcTransactionID;
            return View(SocietyCollectionReversal);
        }

        //
        // POST: /SocietyCollectionReverse/Edit/5

        [HttpPost]
        public ActionResult Edit(Guid id, SocietyCollectionReversal SocietyCollectionReversalToEdit) //id=SocietyCollectionReverseID
        {
            var SocietyCollectionReversal = _service.GetById(id);
            try
            {
                if (_service.Edit(SocietyCollectionReversalToEdit))
                {
                    return RedirectToAction("Index", new { id = SocietyCollectionReversal.SocietySubscriptionID });
                }
                else
                {
                    var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                    var societySubscription = societySubscriptionService.GetById(SocietyCollectionReversal.SocietySubscriptionID);
                    ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionReversal.SocietySubscriptionID);
                    ViewBag.SocietySubscriptionID = SocietyCollectionReversal.SocietySubscriptionID;
                    //var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                    // var societySubscription = societySubscriptionService.GetById(id);
                    var societyID = societySubscription.SocietyID;
                    ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionReversal.SocietySubscriptionID);
                    ViewBag.SocietyID = societyID;
                    ViewBag.SocietyBuildingUnitList = new SocietyBuildingUnitService(this.ModelState).ListBuildingUnitBySocietyID(societyID); ;
                    ViewBag.BillAbbreviationList = new SocietyBillSeriesService(this.ModelState).ListByParentId(societyID);
                    ViewBag.SocietyMemberList = new SocietyMemberService(this.ModelState).ListBySocietyBuildUnitID(SocietyCollectionReversal.SocietyBuildingUnitID);
                    ViewBag.ReverseDate = SocietyCollectionReversal.ReversalDate;
                    ViewBag.SocietyReceiptDetails = new SocietyReceiptService(this.ModelState).ListByParentId(societyID);
                    ViewBag.Particulars = SocietyCollectionReversal.Particulars;
                    ViewBag.PrincipalAdjusted = SocietyCollectionReversal.PrincipalAdjusted;
                    ViewBag.InterestAdjusted = SocietyCollectionReversal.InterestAdjusted;
                    ViewBag.NonChgAdjusted = SocietyCollectionReversal.NonChgAdjusted;
                    // ViewBag.PayModeList = new SocietyPayModeService(this.ModelState).ListByParentId(societySubscription.SocietyID).Where(r => r.Active == true);
                    // ViewBag.BankList = new BankService(this.ModelState).List();
                    // List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(societySubscription.SocietySubscriptionID, SocietyReceipt.BillAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
                    // ViewBag.EndRange = (societySubscription.PaidTillDate == null ? societySubscription.SubscriptionEnd : societySubscription.PaidTillDate);
                    //  ViewBag.StartRange = (billDateList.Count == 0 ? societySubscription.SubscriptionStart : billDateList.First());
                    return View(SocietyCollectionReversal);
                }
            }
            catch
            {
                return View();
            }
        }

        //
        // GET: /SocietyCollectionReverse/Delete/5

        public ActionResult Delete(Guid id)
        {
            SocietyCollectionReversal SocietyCollectionRevers = _service.GetById(id);
            var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
            ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionRevers.SocietySubscriptionID);
            //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(SocietyReceipt.SocietySubscriptionID, SocietyReceipt.BillAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
            //ViewBag.AllowToDelete = (SocietyReceipt.ReceiptDate > (billDateList.Count == 0 ? SocietyReceipt.SocietySubscription.SubscriptionStart : billDateList.First()) ? true : false);
            ViewBag.AllowToDelete = true;
            return View(SocietyCollectionRevers);
        }

        //
        // POST: /SocietyCollectionReverse/Delete/5

        [HttpPost]
        public ActionResult Delete(Guid id, SocietyCollectionReversal SocietyCollectionReversalToDelete)
        {
            SocietyCollectionReversal SocietyCollectionReversal = _service.GetById(id);
            try
            {
                if (_service.Delete(SocietyCollectionReversal))
                    return RedirectToAction("Index", new { id = SocietyCollectionReversal.SocietySubscriptionID });
                else
                {
                    var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                    ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionReversal.SocietySubscriptionID);
                    //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, SocietyReceipt.BillAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
                    //ViewBag.AllowToDelete = (SocietyReceipt.ReceiptDate > (billDateList.Count == 0 ? SocietyReceipt.SocietySubscription.SubscriptionStart : billDateList.First()) ? true : false);
                    ViewBag.AllowToDelete = true;
                    return View(SocietyCollectionReversal);
                }
            }
            catch (Exception ex)
            {
                this.ModelState.AddModelError(_exceptioncontext + " - Get", _exceptioncontext + " " + ex.Message);
                var societySubscriptionService = new CloudSociety.Services.SocietySubscriptionService(this.ModelState);
                ViewBag.SocietyHead = societySubscriptionService.SocietyYear(SocietyCollectionReversal.SocietySubscriptionID);
                //List<DateTime> billDateList = (List<DateTime>)new SocietyBillService(this.ModelState).ListBillDatesBySocietySubscriptionID(id, SocietyReceipt.BillAbbreviation).OrderByDescending(billDate => billDate.Date).ToList();
                //ViewBag.AllowToDelete = (SocietyReceipt.ReceiptDate > (billDateList.Count == 0 ? SocietyReceipt.SocietySubscription.SubscriptionStart : billDateList.First()) ? true : false);
                ViewBag.AllowToDelete = true;
                return View(SocietyCollectionReversal);
            }
        }
    }
}
